{"componentChunkName":"component---src-templates-blog-post-js","path":"/TIL/django-시작하기-(feat.-postgresql)/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"882c2b92-0a92-58aa-8756-000551475682","excerpt":"이때까지 사용해본 웹 프레임워크는 Spring과 Flask가 있었다. Spring은 Java를 사용하던 3학년 때 전자정부표준프레임워크(eGovFrame)을 사용했던 경험으로 알고 있었고, Flask는 지난 6개월 간 엘리스 AI 트랙에서 수행한 프로젝트에서 백엔드 프레임워크로 사용하며 경험하였다. Spring은 MVC 패턴을 따르는 프레임워크로, 데이터를 관리하는 부분(Model)과 HTTP 요청을 처리하는 부분(View)과 라우팅 부분(Controller…","html":"<p>이때까지 사용해본 웹 프레임워크는 <strong>Spring</strong>과 <strong>Flask</strong>가 있었다. Spring은 Java를 사용하던 3학년 때 전자정부표준프레임워크(eGovFrame)을 사용했던 경험으로 알고 있었고, Flask는 지난 6개월 간 엘리스 AI 트랙에서 수행한 프로젝트에서 백엔드 프레임워크로 사용하며 경험하였다.</p>\n<p>Spring은 MVC 패턴을 따르는 프레임워크로, 데이터를 관리하는 부분(Model)과 HTTP 요청을 처리하는 부분(View)과 라우팅 부분(Controller)로 이루어져 있었다. 사실 그때는 MVC 패턴의 장점인 재사용성, 모듈화 등을 정확히 알고 썼다기보다는 폴더가 역할별로 잘 나뉘어 있기 때문에 화면 코드(JSP, HTML)와 데이터를 불러오는 코드(DAO: Data Access Object)가 어지럽게 뒤섞이지 않는 것이 좋았던 것 같다.</p>\n<p>Flask는 Python 환경에서 Flask 패키지를 설치해서 <code class=\"language-text\">app.py</code> 파일 하나에 API 함수를 짜서 하나하나 조립하듯이 구현했기 때문에 직관적이고 자유도가 높아서 좋았다.</p>\n<p>이렇게 지금까지 알고 있던 2개의 프레임워크를 뒤로 하고, Python으로 백엔드를 구현할 때 가장 많이 사용한다는 Django에 대해 알아보려고 한다.</p>\n<h2 id=\"django-조사하기\" style=\"position:relative;\"><a href=\"#django-%EC%A1%B0%EC%82%AC%ED%95%98%EA%B8%B0\" aria-label=\"django 조사하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 조사하기</h2>\n<p>Django에 대해 다룬 블로그나 문서는 아주 많았다. 처음부터 전부 알기엔 어려웠지만, 내 머리는 이때까지의 경험에 빗대어 Django를 이렇게 (아주 거칠게) 요약했다. </p>\n<p><strong>Spring의 MVC 패턴을 가져가면서 Flask처럼 Python을 사용하는 프레임워크</strong></p>\n<p>MVC 패턴에서의 Controller 역할을 Django에서는 프레임워크 자체가 수행하기 때문에 Controller보다는 화면을 보여주는 Template 부분을 강조하여 MVT, MTV 패턴으로 표기한 곳도 많았다.</p>\n<p>Python을 쓰는 Flask와의 비교도 많이 볼 수 있었다. </p>\n<p>Django는 구현해야 하는 내부 앱이 많거나, 안정성과 확장성을 중요하게 여기는 대형 프로젝트에서 사용한다. Django로 프로젝트를 생성하면 대부분의 개발환경 설정이 완료되어 있기 때문에 경제적이다. </p>\n<p>반면 Flask는 복잡한 구조가 필요하지 않고, 안정성을 개발자가 짠 코드만으로도 충분히 커버할 수 있는 간단한 프로젝트에서 많이 사용한다. 당연히 Django보다 가볍다.</p>\n<h2 id=\"django-프로젝트\" style=\"position:relative;\"><a href=\"#django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"django 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 프로젝트</h2>\n<h3 id=\"django-설치\" style=\"position:relative;\"><a href=\"#django-%EC%84%A4%EC%B9%98\" aria-label=\"django 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 설치</h3>\n<p>여러 글을 읽었는데 일단 너무 많고, 나는 글로 읽는 것보다 직접 해보면서 더 잘 배우는 타입이어서 그냥 Django 프로젝트를 하나 만들어보기로 했다.</p>\n<ol>\n<li>\n<p>django 패키지를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> django</code></pre></div>\n</li>\n<li>\n<p>django_test라는 이름의 프로젝트를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">django-admin startproject django_test <span class=\"token builtin class-name\">.</span></code></pre></div>\n</li>\n<li>\n<p>프로젝트 Tree는 다음과 같다. 참고로 Linux 환경에서는 <code class=\"language-text\">tree</code> 명령어를 이용하면 손쉽게 폴더 구조를 그릴 수 있다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">django_test\n<span class=\"token operator\">|</span>-- django_test\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- __init__.py\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- asgi.py\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- settings.py\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>-- urls.py\n<span class=\"token operator\">|</span>   <span class=\"token variable\"><span class=\"token variable\">`</span>-- wsgi.py\n<span class=\"token variable\">`</span></span>-- manage.py</code></pre></div>\n</li>\n</ol>\n<h3 id=\"생성된-파일의-용도\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%9A%A9%EB%8F%84\" aria-label=\"생성된 파일의 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성된 파일의 용도</h3>\n<p>자동으로 생성된 각각의 파일이 어떤 역할을 하는지 알아보았다.</p>\n<ul>\n<li>\n<p><strong>manage.py</strong></p>\n<p>Django 프로젝트의 다양한 커맨드를 관리하는 Util 파일</p>\n</li>\n<li>\n<p><strong><strong>init</strong>.py</strong></p>\n<p>Python이 이 디렉토리를 패키지처럼 다룰 수 있도록 명시하는 파일</p>\n</li>\n<li>\n<p><strong>settings.py</strong></p>\n<p>Django 프로젝트의 환경 및 구성을 저장하는 파일</p>\n</li>\n<li>\n<p><strong>urls.py</strong></p>\n<p>Django 프로젝트의 URL 선언을 저장하는 파일</p>\n</li>\n<li>\n<p><strong>asgi.py</strong></p>\n<p>Django 프로젝트를 서비스하기 위한 ASGI 호환 웹 서버 인터페이스</p>\n</li>\n<li>\n<p><strong>wsgi.py</strong></p>\n<p>Django 프로젝트를 서비스하기 위한 WSGI 호환 웹 서버 인터페이스</p>\n</li>\n</ul>\n<h3 id=\"wsgi와-asgi의-차이점\" style=\"position:relative;\"><a href=\"#wsgi%EC%99%80-asgi%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"wsgi와 asgi의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WSGI와 ASGI의 차이점</h3>\n<p>생성된 파일을 보면, 웹 서버 인터페이스를 담당하는 파일이 wsgi.py와 asgi.py로 2개인 것을 확인할 수 있다. 애플리케이션이 Nginx, Apache와 같은 웹 서버와 상호작용하기 위한 인터페이스라는 점에서는 같은 역할을 하지만, 각각 호환되는 형식에 따라 나뉜 것이다.</p>\n<p>그렇다면 이 2가지 형식의 차이는 무엇일까? 가장 큰 차이점은 <strong>비동기 처리의 가능 여부</strong>에 있다.</p>\n<ul>\n<li>\n<p><strong>WSGI</strong></p>\n<p>웹 서버와 애플리케이션 사이의 미들웨어로 웹 서버가 애플리케이션의 코드를 이해할 수 있도록 중간에서 코드를 읽어 반환하는 역할이다. WSGI는 2가지 형태가 존재한다.</p>\n<ul>\n<li>웹서버(Nginx, Apache)에서 제공하는 내장 모듈 형식</li>\n<li>Python으로 작성된 Web App Server 형식</li>\n</ul>\n</li>\n<li>\n<p><strong>ASGI</strong></p>\n<p>대용량 트래픽에서 동기 처리만을 지원하여 한계를 가지는 WSGI와는 달리, ASGI는 비동기 처리를 지원한다. 따라서 <strong>Websocket 프로토콜과 HTTP 2.0을 지원</strong>한다고 한다. Websocket 등을 사용한 <strong>실시간 서비스</strong> 등에는 ASGI가 적합하다.</p>\n</li>\n</ul>\n<h3 id=\"postsql-데이터베이스에-유저-등록하기\" style=\"position:relative;\"><a href=\"#postsql-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-%EC%9C%A0%EC%A0%80-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\" aria-label=\"postsql 데이터베이스에 유저 등록하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PostSQL 데이터베이스에 유저 등록하기</h3>\n<ol>\n<li>\n<p>PostgreSQL은 사전에 설치한 상태이다. 다음과 같이 입력하여 접속한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> -u postgres psql</code></pre></div>\n</li>\n<li>\n<p>접속에 성공하면 유저를 생성한다. ‘admin’이라는 이름으로 생성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">CREATE <span class=\"token environment constant\">USER</span> admin<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>프로젝트에 쓸 데이터베이스를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">CREATE DATABASE django_db OWNER admin<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>참고로 유저 패스워드는 다음과 같이 변경할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ALTER <span class=\"token environment constant\">USER</span> admin WITH PASSWORD <span class=\"token string\">'admin'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"postgresql-패키지-설치하기\" style=\"position:relative;\"><a href=\"#postgresql-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"postgresql 패키지 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PostgreSQL 패키지 설치하기</h3>\n<p>pip로 PostgreSQL 패키지를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> psycopg2</code></pre></div>\n<p>설치하는 중에 다음과 같은 오류가 발생하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">..</span>.\n./psycopg/psycopg.h:36:10: fatal error: libpq-fe.h: No such <span class=\"token function\">file</span> or directory\n<span class=\"token punctuation\">..</span>.\nerror: <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'x86_64-linux-gnu-gcc'</span> failed with <span class=\"token builtin class-name\">exit</span> status <span class=\"token number\">1</span></code></pre></div>\n<p><code class=\"language-text\">libpq</code> 패키지를 따로 설치하고 다시 시도하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libpq-dev</code></pre></div>\n<h3 id=\"프로젝트-설정settingspy-수정하기\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EC%A0%95settingspy-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"프로젝트 설정settingspy 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 설정(settings.py) 수정하기</h3>\n<p>Django 프로젝트의 설정이 구현되어 있는 <code class=\"language-text\">settings.py</code> 파일을 다음과 같이 수정한다. 데이터베이스로 설정한 PostgreSQL은 사전에 설치한 상태이다.</p>\n<ul>\n<li>시간대(TIME_ZONE)</li>\n<li>static 폴더의 경로(STATIC_ROOT)</li>\n<li>데이터베이스 설정(DATABASES)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nDjango settings for django_test project.\n\nGenerated by 'django-admin startproject' using Django 3.2.6.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.2/ref/settings/\n\"\"\"</span>\n\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n\n<span class=\"token comment\"># Build paths inside the project like this: BASE_DIR / 'subdir'.</span>\nBASE_DIR <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent\n\n<span class=\"token comment\"># Quick-start development settings - unsuitable for production</span>\n<span class=\"token comment\"># See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/</span>\n\n<span class=\"token comment\"># SECURITY WARNING: keep the secret key used in production secret!</span>\nSECRET_KEY <span class=\"token operator\">=</span> <span class=\"token string\">'django-insecure-#x(fox4#*2+x(c%v!jmf(7om$xw)_9qx0y^&amp;efx6i9_b)9fv+d'</span>\n\n<span class=\"token comment\"># SECURITY WARNING: don't run with debug turned on in production!</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\nALLOWED_HOSTS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Application definition</span>\n\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nMIDDLEWARE <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.middleware.security.SecurityMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.middleware.common.CommonMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.middleware.csrf.CsrfViewMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages.middleware.MessageMiddleware'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nROOT_URLCONF <span class=\"token operator\">=</span> <span class=\"token string\">'django_test.urls'</span>\n\nTEMPLATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.template.backends.django.DjangoTemplates'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'APP_DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'context_processors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'django.template.context_processors.debug'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'django.template.context_processors.request'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'django.contrib.auth.context_processors.auth'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'django.contrib.messages.context_processors.messages'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nWSGI_APPLICATION <span class=\"token operator\">=</span> <span class=\"token string\">'django_test.wsgi.application'</span>\n\n<span class=\"token comment\"># Database</span>\n<span class=\"token comment\"># https://docs.djangoproject.com/en/3.2/ref/settings/#databases</span>\n\nDATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.postgresql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django_db'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'5432'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Password validation</span>\n<span class=\"token comment\"># https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators</span>\n\nAUTH_PASSWORD_VALIDATORS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.MinimumLengthValidator'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.CommonPasswordValidator'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.NumericPasswordValidator'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Internationalization</span>\n<span class=\"token comment\"># https://docs.djangoproject.com/en/3.2/topics/i18n/</span>\n\nLANGUAGE_CODE <span class=\"token operator\">=</span> <span class=\"token string\">'en-us'</span>\n\nTIME_ZONE <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Seoul'</span>\n\nUSE_I18N <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\nUSE_L10N <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\nUSE_TZ <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token comment\"># Static files (CSS, JavaScript, Images)</span>\n<span class=\"token comment\"># https://docs.djangoproject.com/en/3.2/howto/static-files/</span>\n\nSTATIC_URL <span class=\"token operator\">=</span> <span class=\"token string\">'/static/'</span>\nSTATIC_ROOT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Default primary key field type</span>\n<span class=\"token comment\"># https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field</span>\n\nDEFAULT_AUTO_FIELD <span class=\"token operator\">=</span> <span class=\"token string\">'django.db.models.BigAutoField'</span></code></pre></div>\n<h2 id=\"django--postgresql-연동하기\" style=\"position:relative;\"><a href=\"#django--postgresql-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"django  postgresql 연동하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django + PostgreSQL 연동하기</h2>\n<p>Django 프로젝트에 데이터베이스가 반영될 수 있도록 마이그레이션 작업을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 마이그레이트</span>\npython3 manage.py migrate\n\n<span class=\"token comment\"># 슈퍼유저 생성</span>\npython manage.py createsuperuser</code></pre></div>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>Django 초보 가이드 - 실습을 통해 알아보는 장고 입문 (<a href=\"https://www.inflearn.com/course/django-%EC%B4%88%EB%B3%B4-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%8B%A4%EC%8A%B5%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EC%9E%A5%EA%B3%A0-%EC%9E%85%EB%AC%B8\">강의</a>)</li>\n<li>\n<p>Django 공식 문서 (문서)</p>\n<ul>\n<li>Django 앱 작성하기 (<a href=\"https://docs.djangoproject.com/ko/3.2/intro/tutorial01/\">문서</a>)</li>\n<li>ASGI를 사용하여 배포하는 방법 (<a href=\"https://docs.djangoproject.com/ko/3.2/howto/deployment/asgi/\">문서</a>)</li>\n</ul>\n</li>\n<li>\n<p>Django Girls 튜토리얼</p>\n<ul>\n<li>나의 첫 번째 Django 프로젝트 (<a href=\"https://tutorial.djangogirls.org/ko/django_start_project/\">블로그</a>)</li>\n<li>PostgreSQL 연동 준비 (<a href=\"https://tutorial-extensions.djangogirls.org/ko/optional_postgresql_installation#undefined-6\">블로그</a>)</li>\n</ul>\n</li>\n<li>REST API 개발로 알아보는 WSGI, ASGI (<a href=\"https://blog.neonkid.xyz/249\">블로그</a>)</li>\n<li>psycopg2 설치 오류 (<a href=\"https://stackoverflow.com/questions/63584368/pip-install-psycopg2-error-command-x86-64-linux-gnu-gcc-failed-with-exit-st\">문서</a>)</li>\n<li>PostgreSQL 연동하기 (<a href=\"https://hecpas0620.tistory.com/15\">블로그</a>)</li>\n</ul>","frontmatter":{"title":"Django 시작하기 (feat. PostgreSQL)","date":"2021-08-03"}}},"pageContext":{"slug":"/TIL/django-시작하기-(feat.-postgresql)/","previous":{"fields":{"slug":"/TIL/postgresql-시작하기-(feat.-django)/"},"frontmatter":{"title":"PostgreSQL 시작하기 (feat. Django)"}},"next":null}}}
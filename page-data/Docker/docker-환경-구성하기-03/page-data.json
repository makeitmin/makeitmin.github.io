{"componentChunkName":"component---src-templates-blog-post-js","path":"/Docker/docker-환경-구성하기-03/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7e16fff8-a844-599b-a81f-2e9da96daa9c","excerpt":"Docker 이미지 받아오기 이전 글에서 생성했던 Docker 이미지, 그러니까 프로젝트 팀원들에게 배포하기 위해 생성한 Docker 이미지는 Docker Hub의 개인 레포지토리에 있다. 이 이미지를 끌어와서 간단하게 동일한 개발환경을 세팅할 수 있다. 다음 명령어로 이미지가 잘 가져와졌는지 확인한다. Docker…","html":"<h2 id=\"docker-이미지-받아오기\" style=\"position:relative;\"><a href=\"#docker-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0\" aria-label=\"docker 이미지 받아오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 이미지 받아오기</h2>\n<p>이전 글에서 생성했던 Docker 이미지, 그러니까 프로젝트 팀원들에게 배포하기 위해 생성한 Docker 이미지는 Docker Hub의 <a href=\"https://hub.docker.com/repository/docker/seongminha/masl\">개인 레포지토리</a>에 있다. 이 이미지를 끌어와서 간단하게 동일한 개발환경을 세팅할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker pull seongminha/masl:2.0</code></pre></div>\n<p>다음 명령어로 이미지가 잘 가져와졌는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker images</code></pre></div>\n<h2 id=\"docker-컨테이너-생성-및-실행\" style=\"position:relative;\"><a href=\"#docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%8B%A4%ED%96%89\" aria-label=\"docker 컨테이너 생성 및 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 컨테이너 생성 및 실행</h2>\n<p>이미지를 잘 가져왔다면, 이 이미지를 쓸 수 있도록 컨테이너로 만들어줘야한다. <code class=\"language-text\">coffee</code>는 그냥 컨테이너를 부를 이름이다. 마음에 드는 이름으로 바꾸어도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> docker run -it --name coffee seongminha/masl:2.0</code></pre></div>\n<p>Ubuntu 컨테이너로 접속이 되는 것을 확인하였다면, 여러 명령어를 사용하여 프로그램들이 잘 설치되어 있는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span>\nnode -v\n<span class=\"token function\">npm</span> -v\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>다음 명령어로 Ubuntu 컨테이너를 종료한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exit</span></code></pre></div>\n<p>컨테이너를 다시 시작할 때는 꼭 다음 명령어를 사용한다. <code class=\"language-text\">docker run -</code> 명령어를 사용하면 컨테이너를 리셋하고 새로 시작하는 것이기 때문에 내부에 있던 작업물이 전부 날아가니 주의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker start coffee</code></pre></div>\n<p>컨테이너를 시작한 후 Ubuntu shell에 접속할 때는 다음 명령어를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker attach coffee</code></pre></div>\n<h2 id=\"visual-studio-code에서-docker-컨테이너-사용하기\" style=\"position:relative;\"><a href=\"#visual-studio-code%EC%97%90%EC%84%9C-docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"visual studio code에서 docker 컨테이너 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visual Studio Code에서 Docker 컨테이너 사용하기</h2>\n<p>아무래도 계속 shell에서 개발을 하는 것은 무리가 있다. Visual Studio Code에 Docker 컨테이너를 붙여서 개발환경을 로컬처럼 만들어보자.</p>\n<ol>\n<li>Visual Studio Code에서 <strong>Remote Container Extension</strong>과 <strong>Docker Extension</strong>, <strong>Docker Explorer Extension</strong>을 각각 설치해준다.</li>\n<li>F1을 눌러 <code class=\"language-text\">Remote-Containers: Attach to Running Container...</code> 을 클릭해준다. 이 때 Docker 컨테이너는 start 되어 있는 상태여야 한다.</li>\n<li>Docker 컨테이너와 Visual Studio Code가 연결되면 왼쪽 하단에 <code class=\"language-text\">Container 이미지명 (/컨테이너명)</code> 이 Remote로 연결되었다고 뜬다.</li>\n<li>Visual Studio Code에서 Terminal을 열어 workspace 폴더에 프로젝트를 git clone 해준다.</li>\n<li>좌측의 Explorer에서 Open Folder로 clone 된 프로젝트 폴더를 열어주면 개발을 진행할 수 있는 환경이 된다.</li>\n</ol>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>초보를 위한 도커 안내서 (<a href=\"https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html\">블로그</a>)</li>\n<li>도커(Docker) 입문편: 컨테이너 기초부터 서버 배포까지 (<a href=\"https://www.44bits.io/ko/post/easy-deploy-with-docker#%EB%8F%84%EC%BB%A4-%ED%97%88%EB%B8%8C%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%98%AC%EB%A6%AC%EA%B8%B0\">블로그</a>)</li>\n<li>VS Code에 Docker 연동하기 (<a href=\"https://89douner.tistory.com/m/123\">블로그</a>)</li>\n</ul>","frontmatter":{"title":"Docker 환경 구성하기 03","date":"2021-01-29"}}},"pageContext":{"slug":"/Docker/docker-환경-구성하기-03/","previous":{"fields":{"slug":"/Docker/docker-환경-구성하기-02/"},"frontmatter":{"title":"Docker 환경 구성하기 02"}},"next":{"fields":{"slug":"/Git/gitlab에서-github로-repository-이전하기/"},"frontmatter":{"title":"GitLab에서 GitHub로 Repository 이전하기"}}}}}
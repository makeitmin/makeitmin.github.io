{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/쓰레드의-생성과-소멸/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"e24130ff-28a2-5154-8552-c71187e5eae3","excerpt":"쓰레드의 생성 생성 가능한 쓰레드의 개수는 할당 가능한 스택 메모리의 최대치 쓰레드의 소멸 일반적으로 안정적인 소프트웨어는 Life Cycle이 메인에서 시작하고 종료 쓰레드 종료 시 return을 이용하면 좋은 경우 모든 함수가 return을 마치고 나서 메인 함수에서 return(종료)을 할 때 쓰레드 종료 시 ExitThread 함수 호출이 유용한 경우 실행되는 현재 함수의 위치에서 바로 종료해야 할 때 쓰레드 종료 시 Terminate Thread…","html":"<h2 id=\"쓰레드의-생성\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-label=\"쓰레드의 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드의 생성</h2>\n<p>생성 가능한 쓰레드의 개수는 할당 가능한 스택 메모리의 최대치</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">HANDLE <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span>\n\tLPSECURITY_ATTRIBUTES <span class=\"token comment\">// 디폴트 보안 관리자</span>\n\tSIZE_T <span class=\"token comment\">// 디폴트 스택 사이즈</span>\n\tLPTHREAD_START_ROUTINE <span class=\"token comment\">//쓰레드 Main 함수 설정</span>\n\tLPVOID <span class=\"token comment\">// 쓰레드 함수의 전달인자</span>\n\tDWORD <span class=\"token comment\">// 디폴트 쓰레드 생성 속성</span>\n\tLPDWORD <span class=\"token comment\">// 쓰레드 ID 저장을 위한 주소값 전달</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"쓰레드의-소멸\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%86%8C%EB%A9%B8\" aria-label=\"쓰레드의 소멸 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드의 소멸</h2>\n<p>일반적으로 안정적인 소프트웨어는 Life Cycle이 메인에서 시작하고 종료</p>\n<ol>\n<li><strong>쓰레드 종료 시 return을 이용하면 좋은 경우</strong><br>\n모든 함수가 return을 마치고 나서 메인 함수에서 return(종료)을 할 때</li>\n<li><strong>쓰레드 종료 시 ExitThread 함수 호출이 유용한 경우</strong><br>\n실행되는 현재 함수의 위치에서 바로 종료해야 할 때</li>\n<li><strong>쓰레드 종료 시 Terminate Thread 함수 호출이 유용한 경우</strong><br>\n외부에서 쓰레드를 강제 종료시키는 경우</li>\n</ol>\n<h2 id=\"쓰레드의-성격과-특성\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%84%B1%EA%B2%A9%EA%B3%BC-%ED%8A%B9%EC%84%B1\" aria-label=\"쓰레드의 성격과 특성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드의 성격과 특성</h2>\n<p><strong>쓰레드에서는 힙, 데이터, 코드 영역 공유</strong></p>\n<ul>\n<li>코드 영역을 공유한다는 것은 각각의 쓰레드가 하나의 쓰레드 함수를 자신의 메인 함수로 사용할 수 있다는 의미</li>\n</ul>\n<p><strong>동시 접근의 문제점</strong></p>\n<ul>\n<li>\n<p>임계영역 접근  </p>\n<ul>\n<li>둘 이상의 쓰레드가 동시에 실행되면 안 되는 코드블럭에 접근</li>\n<li>쓰레드가 전역변수에 작업을 하고 있는 동안 다른 쓰레드 접근 불가</li>\n</ul>\n</li>\n</ul>\n<p><strong>프로세스로부터의 쓰레드 분리</strong></p>\n<ul>\n<li>쓰레드 종료 시 Usage Count = 1</li>\n<li>커널 오브젝트의 메모리에 여전히 잔재</li>\n<li>쓰레드가 종료될 경우 커널 오브젝트에서 모든 리소스를 제거하도록 생성과 동시에 <code class=\"language-text\">CloseHandle</code> 함수를 호출</li>\n</ul>\n<p><strong>_beginthreadex 함수</strong></p>\n<ul>\n<li>내부적으로 <code class=\"language-text\">CreateThread</code> 함수를 호출</li>\n<li>둘 이상의 쓰레드가 1개의 메모리 공간에 동시 접근하지 않도록 각 쓰레드를 위한 별도의 메모리 공간을 형성 (임계영역 문제 해소)</li>\n</ul>\n<p><strong>_endthreadex 함수</strong></p>\n<ul>\n<li><code class=\"language-text\">ExitThread</code>와 기능 상동하나 할당된 메모리 공간 해제(반환)하는 기능이 추가</li>\n</ul>\n<h2 id=\"쓰레드의-상태-컨트롤\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EC%BB%A8%ED%8A%B8%EB%A1%A4\" aria-label=\"쓰레드의 상태 컨트롤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드의 상태 컨트롤</h2>\n<p>프로세스의 상태 컨트롤(Ready, Running, Blocked)와 동일</p>\n<p><strong>SuspendThread 함수</strong></p>\n<ul>\n<li>해당 쓰레드의 실행을 잠시 정지 (Running→ blocked)</li>\n</ul>\n<p><strong>ResumeThread 함수</strong></p>\n<ul>\n<li>정지된 쓰레드를 다시 Ready 상태로 변환 (Blocked → Ready)</li>\n</ul>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>뇌를 자극하는 윈도우즈 시스템 프로그래밍 (<a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9788979144611&#x26;orderClick=LEa&#x26;Kc=\">도서</a>, <a href=\"https://www.inflearn.com/course/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">강의</a>)</li>\n</ul>","frontmatter":{"title":"쓰레드의 생성과 소멸","date":"2021-09-06"}}},"pageContext":{"slug":"/Computer Science/쓰레드의-생성과-소멸/","previous":{"fields":{"slug":"/TIL/django-소셜-로그인(google-oauth)-구현하기/"},"frontmatter":{"title":"Django 소셜 로그인(Google OAuth) 구현하기"}},"next":{"fields":{"slug":"/Computer Science/쓰레드-동기화-기법-1/"},"frontmatter":{"title":"쓰레드 동기화 기법 1"}}}}}
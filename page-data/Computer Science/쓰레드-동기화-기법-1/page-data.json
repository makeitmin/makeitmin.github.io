{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/쓰레드-동기화-기법-1/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d8a7de2e-4dc1-5550-983b-226bf8ac0e10","excerpt":"…","html":"<p><strong>임계영역</strong></p>\n<ul>\n<li>둘 이상의 쓰레드가 접근할 위험을 지닌 코드블럭</li>\n<li>한 순간에 정해진 개수의 쓰레드만 접근할 수 있도록 동기화 필요</li>\n</ul>\n<hr>\n<p><strong>동기화 기법의 종류</strong></p>\n<ul>\n<li>\n<p>메모리 동기화 기법</p>\n<ul>\n<li>\n<p>유저 모드 동기화</p>\n<ul>\n<li>크리티컬 섹션 기반 동기화</li>\n<li>인터락 함수 기반 동기화</li>\n</ul>\n</li>\n<li>\n<p>커널 모드 동기화</p>\n<ul>\n<li>뮤텍스 기반 동기화</li>\n<li>세마포어 기반 동기화</li>\n<li>이름 있는 뮤텍스 기반 동기화</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>실행 순서 동기화 기법</p>\n<ul>\n<li>이벤트 기반 동기화</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"메모리-동기화-기법\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%8F%99%EA%B8%B0%ED%99%94-%EA%B8%B0%EB%B2%95\" aria-label=\"메모리 동기화 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 동기화 기법</h2>\n<h3 id=\"유저모드-동기화\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A0%80%EB%AA%A8%EB%93%9C-%EB%8F%99%EA%B8%B0%ED%99%94\" aria-label=\"유저모드 동기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유저모드 동기화</h3>\n<ul>\n<li>\n<p><strong>크리티컬 섹션 기반 동기화</strong></p>\n<ul>\n<li>크리티컬 섹션 오브젝트(키)를 할당하고 반환</li>\n<li>임계영역은 최소한의 필요한 영역을 지정</li>\n<li>크리티컬 섹션이 넓으면 둘 이상의 쓰레드가 접근할 수 있는 범위가 제한되어 성능 저하</li>\n</ul>\n</li>\n<li>\n<p><strong>인터락 함수 기반 동기화</strong></p>\n<ul>\n<li>크리티컬 섹션 기반 동기화를 하나의 함수로 구현</li>\n<li>작은 영역의 코드블럭에 대해 동기화하기 용이</li>\n<li>원자적 접근을 보장하여 한 순간에 하나의 쓰레드에 의해서만 호출을 허용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"커널모드-동기화\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%84%90%EB%AA%A8%EB%93%9C-%EB%8F%99%EA%B8%B0%ED%99%94\" aria-label=\"커널모드 동기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커널모드 동기화</h3>\n<ul>\n<li>\n<p><strong>뮤텍스 기반 동기화</strong></p>\n<ul>\n<li>임계영역에 들어오는 쓰레드 개수(키)가 1개</li>\n<li>\n<p>뮤텍스의 상태를 기준으로 임계영역 처리</p>\n<ul>\n<li>뮤텍스 커널 오브젝트가 Signaled 상태이면 획득(WaitForSingleObject 호출) 가능</li>\n<li>뮤텍스 커널 오브젝트가 Non-Signaled 상태이면 반납(ReleaseMutex 호출) 가능</li>\n</ul>\n</li>\n<li>\n<p>쓰레드가 실행되다가 뮤텍스를 반환하지 않고 종료했을 경우</p>\n<ul>\n<li>예외처리로 WAIT_ABANDONED를 호출하여 다음 쓰레드에 뮤텍스 할당</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>세마포어 기반 동기화</strong></p>\n<ul>\n<li>임계영역에 들어오는 쓰레드 개수(키) 제한 가능</li>\n<li>InitialCount 변수에 키의 개수 초기화</li>\n<li>MaximumCount 변수에 세마포어가 가질 수 있는 최대 값 초기화 (≥InitialCount)</li>\n<li>\n<p>세마포어 커널 오브젝트가 Signaled 상태이면 획득(WaitForSingleObject 호출) 가능</p>\n<ul>\n<li>InitialCount  값만큼 전부 소진하면 Non-Signaled로 전환</li>\n</ul>\n</li>\n<li>세마포어 커널 오브젝트가 Non-Signaled 상태이면 반납(ReleaseSemaphore 호출) 가능</li>\n<li>\n<p>쓰레드가 실행되다가 세마포어 카운트를 반환하지 않고 종료했을 경우</p>\n<ul>\n<li>획득된 세마포어 카운트와 반환된 세마포어 카운트가 달라도 오류 X</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>이름있는 뮤텍스 기반 동기화</strong></p>\n<ul>\n<li>상이한 프로세스 내의 각각의 쓰레드를 동기화</li>\n<li>CreateMutex로 뮤텍스 생성하여 OpenMutex로 핸들 등록하여 동기화</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>뇌를 자극하는 윈도우즈 시스템 프로그래밍 (<a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9788979144611&#x26;orderClick=LEa&#x26;Kc=\">도서</a>, <a href=\"https://www.inflearn.com/course/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">강의</a>)</li>\n</ul>","frontmatter":{"title":"쓰레드 동기화 기법 1","date":"2021-09-26"}}},"pageContext":{"slug":"/Computer Science/쓰레드-동기화-기법-1/","previous":{"fields":{"slug":"/Computer Science/쓰레드의-생성과-소멸/"},"frontmatter":{"title":"쓰레드의 생성과 소멸"}},"next":{"fields":{"slug":"/Computer Science/쓰레드-동기화-기법-2/"},"frontmatter":{"title":"쓰레드 동기화 기법 2"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/TIL/django-orm-queryset을-사용하여-레코드-단위-데이터-불러오기/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a4a15e51-a6c0-5ec3-8885-03d4433afe7d","excerpt":"Django ORM Query를 사용하면서, 레코드 단위로 한 줄씩 데이터를 불러오는 경우를 구현할 일이 생겼다. 접속이 뜸해 특정 유형으로 전환되는 사용자에게 메일을 보내는 일반 배치 프로그램이었는데, 단순히 생각하면 대상이 되는 사용자를 filter 메소드로 일괄 불러와서 로직을 처리해야겠다는 생각이 들 수도 있다.   하지만, 한꺼번에 불러와서 메일을 보내는 로직을 구현할 경우,   특정 유형으로 전환 안내 메일 발송 이…","html":"<p>Django ORM Query를 사용하면서, 레코드 단위로 한 줄씩 데이터를 불러오는 경우를 구현할 일이 생겼다. 접속이 뜸해 특정 유형으로 전환되는 사용자에게 메일을 보내는 일반 배치 프로그램이었는데, 단순히 생각하면 <strong>대상이 되는 사용자를 filter 메소드로 일괄 불러와서 로직을 처리해야겠다</strong>는 생각이 들 수도 있다.  </p>\n<p>하지만, 한꺼번에 불러와서 메일을 보내는 로직을 구현할 경우,  </p>\n<ol>\n<li>특정 유형으로 전환</li>\n<li>안내 메일 발송</li>\n</ol>\n<p>이 2가지 작업이 서버에서 진행되는 도중에 사용자가 접속하는 경우를 커버할 수 없다. 왜냐하면 filter 메소드로 한꺼번에 여러 레코드를 불러오면, <strong>해당 사용자의 접속시점이 현재로 업데이트 되어도 이미 Query가 배치 프로그램을 시작하면서 업데이트 전의 데이터를 전부 불러온 후이기 때문</strong>이다.  </p>\n<p>그렇게 되면 사전에 안내된 기한을 넘기지 않으려고 간발의 차로 접속한 사용자를 그냥 오래 접속하지 않은 사용자로 전환해버리고 메일을 보내는 상황이 발생할 수도 있다.  </p>\n<p>따라서 이를 방지하기 위해서는 데이터(레코드)를 1행씩 불러오는 것이 안전한데, ORM Query로 이를 구현하는 방식을 찾아보았다.</p>\n<h2 id=\"sql로-생각해보기\" style=\"position:relative;\"><a href=\"#sql%EB%A1%9C-%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"sql로 생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL로 생각해보기</h2>\n<p>ORM Query를 거의 사용해본 적이 없어서, 나는 일단 SQL로 생각하는 것이 편했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> table_name <span class=\"token keyword\">WHERE</span> target_field <span class=\"token operator\">&lt;</span> target_value <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 하면 특정 조건을 만족하는 레코드 중에 가장 첫 번째 레코드를 볼 수 있다. </p>\n<h2 id=\"orm-query로-바꿔보기\" style=\"position:relative;\"><a href=\"#orm-query%EB%A1%9C-%EB%B0%94%EA%BF%94%EB%B3%B4%EA%B8%B0\" aria-label=\"orm query로 바꿔보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ORM Query로 바꿔보기</h2>\n<p>이제 이걸 ORM Query로 바꿔보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Model<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>target_field__lt<span class=\"token operator\">=</span>target_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># or</span>\nModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>target_field__lt<span class=\"token operator\">=</span>target_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>한 줄씩 가져오는 게 목적이므로 첫 번째 Query가 조금 더 적합해보여서 그렇게 적용했다. SQL에서 <code class=\"language-text\">LIMIT 0, 1</code>은 <strong>0번째부터 1개의 레코드</strong>를 의미한다. ORM Query에서는 이 경우를 <strong>Python 리스트 타입의 인덱싱 방식</strong>으로 구현할 수 있다.</p>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>Django Limiting QuerySets (<a href=\"https://docs.djangoproject.com/en/3.0/topics/db/queries/#limiting-querysets\">문서</a>)</li>\n</ul>","frontmatter":{"title":"Django ORM Query로 레코드 단위의 데이터 불러오기","date":"2021-08-27"}}},"pageContext":{"slug":"/TIL/django-orm-queryset을-사용하여-레코드-단위-데이터-불러오기/","previous":{"fields":{"slug":"/TIL/media-query에서-font-size-줄이기/"},"frontmatter":{"title":"Media Query에서 font-size 줄이기"}},"next":{"fields":{"slug":"/Computer Science/쓰레드의-이해/"},"frontmatter":{"title":"쓰레드의 이해"}}}}}
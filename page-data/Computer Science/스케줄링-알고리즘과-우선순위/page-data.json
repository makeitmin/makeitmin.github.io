{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/스케줄링-알고리즘과-우선순위/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7e29cd97-4e95-5171-bf95-f2eee34ded5c","excerpt":"스케줄러의 동작 방식에 따른 OS 종류 일반 OS와 리얼타임 OS(RTOS) 실행속도는 CPU의 성능에 종속적 (OS 이슈 X) 핵심은 시작시각: RTOS가 일반 OS보다 빠른 시작 (응답성이 우수) 클럭 관점의 타임슬라이스를 기준으로 프로세스의 실행 주기 변화 일반 OS는 타임슬라이스가 길어 느린 시작 RTOS는 타임슬라이스가 짧아 빠른 시작 선점형 OS와 비선점형 OS 선점형 OS…","html":"<h2 id=\"스케줄러의-동작-방식에-따른-os-종류\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D%EC%97%90-%EB%94%B0%EB%A5%B8-os-%EC%A2%85%EB%A5%98\" aria-label=\"스케줄러의 동작 방식에 따른 os 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스케줄러의 동작 방식에 따른 OS 종류</h2>\n<h3 id=\"일반-os와-리얼타임-osrtos\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-os%EC%99%80-%EB%A6%AC%EC%96%BC%ED%83%80%EC%9E%84-osrtos\" aria-label=\"일반 os와 리얼타임 osrtos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 OS와 리얼타임 OS(RTOS)</h3>\n<ul>\n<li>실행속도는 CPU의 성능에 종속적 (OS 이슈 X)</li>\n<li>핵심은 시작시각: RTOS가 일반 OS보다 빠른 시작 (<strong>응답성</strong>이 우수)</li>\n<li>\n<p><strong>클럭 관점의 타임슬라이스</strong>를 기준으로 프로세스의 실행 주기 변화</p>\n<ul>\n<li>일반 OS는 타임슬라이스가 길어 <strong>느린 시작</strong></li>\n<li>RTOS는 타임슬라이스가 짧아 <strong>빠른 시작</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"선점형-os와-비선점형-os\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%A0%90%ED%98%95-os%EC%99%80-%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95-os\" aria-label=\"선점형 os와 비선점형 os permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선점형 OS와 비선점형 OS</h3>\n<ul>\n<li>\n<p><strong>선점형 OS</strong></p>\n<ul>\n<li>우선순위가 낮은 프로세스가 실행 중에 우선순위가 높은 프로세스가 생성되었을 때, 타임슬라이스 만큼의 시간을 소모하고 스케줄러가 바로 우선순위가 높은 프로세스로 교체</li>\n<li><strong>스케줄러가 프로세스의 운영에 많은 관여</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>비선점형 OS</strong></p>\n<ul>\n<li>우선순위가 낮은 프로세스가 실행 중에 우선순위가 높은 프로세스가 생성되었을 때, 우선순위가 낮은 프로세스가 끝날 때까지 우선순위가 높은 프로세스는 대기</li>\n<li>이미 실행 중인 (우선순위가 낮은) 프로세스가 우선순위가 높은 프로세스의 실행을 위해 CPU를 포기하는 함수를 명시적으로 호출해야 우선순위가 높은 프로세스를 실행 가능</li>\n<li><strong>스케줄러가 프로세스의 운영에 제한적으로 관여</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"스케줄링-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"스케줄링 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스케줄링 알고리즘</h2>\n<h3 id=\"스케줄링-알고리즘의-적용\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EC%A0%81%EC%9A%A9\" aria-label=\"스케줄링 알고리즘의 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스케줄링 알고리즘의 적용</h3>\n<ul>\n<li>동일 우선순위일 경우 라운드로빈 기반 알고리즘을 적용</li>\n<li>높은 우선순위가 존재할 경우 우선순위 기반 알고리즘을 적용</li>\n</ul>\n<h3 id=\"스케줄링-알고리즘에-따른-프로세스의-실행-흐름\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%97%90-%EB%94%B0%EB%A5%B8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89-%ED%9D%90%EB%A6%84\" aria-label=\"스케줄링 알고리즘에 따른 프로세스의 실행 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스케줄링 알고리즘에 따른 프로세스의 실행 흐름</h3>\n<ol>\n<li>높은 우선순위가 존재하는지 먼저 탐색하여 해당하는 큐를 실행</li>\n<li>동일한 큐 내에서 동일 우선순위를 가진 프로세스는 번갈아가며 라운드로빈 기반으로 실행</li>\n<li>낮은 우선순위의 큐는 I/O 연산이 수행될 때 현재 실행 중인 높은 우선순위의 큐가 Blocked 상태로 전환되므로 그 때 실행</li>\n</ol>\n<h2 id=\"스케줄링-진행-시점\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%A7%84%ED%96%89-%EC%8B%9C%EC%A0%90\" aria-label=\"스케줄링 진행 시점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스케줄링 진행 시점</h2>\n<p>스케줄러도 하나의 프로세스이므로 자주 실행되면 성능 저하가 발생</p>\n<ul>\n<li>\n<p><strong>매 타임슬라이스마다 동작</strong></p>\n<ul>\n<li>\n<p>타임슬라이스 중에도 컨텍스트 스위칭이 발생할 수 있는지</p>\n<ul>\n<li>성능저하를 방지하기 위해 <strong>타임슬라이스를 길게 설정했을 경우</strong>, 여러 상황(프로세스 생성, 소멸, 상태변화)에서 응답성이 저하되므로 추가적으로 동작할 수 있도록 설정</li>\n<li><strong>타임슬라이스를 좁게 설정했을 경우</strong>, 스케줄러의 동작 주기가 짧기 때문에 여러 상황을 커버 가능하므로 불필요하게 타임슬라이스 중에 컨텍스트 스위칭을 발생시키지 않도록 설정</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>프로세스가 생성 및 소멸될 때마다 동작</strong>  </p>\n<ul>\n<li>프로세스가 생성되면 스케줄러가 생성된 프로세스를 관찰하고 정보를 입력</li>\n<li>프로세스가 소멸되면 대신 다른 프로세스의 상태를 제어 (Ready, Running, Blocked)</li>\n</ul>\n</li>\n<li>\n<p><strong>현재 실행중인 프로세스가 Blocked 상태에 놓일 때마다 동작</strong>  </p>\n<ul>\n<li>다른 프로세스를 실행시키기 위해 동작</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>뇌를 자극하는 윈도우즈 시스템 프로그래밍 (<a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9788979144611&#x26;orderClick=LEa&#x26;Kc=\">도서</a>, <a href=\"https://www.inflearn.com/course/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">강의</a>)</li>\n</ul>","frontmatter":{"title":"스케줄링 알고리즘과 우선순위","date":"2021-08-08"}}},"pageContext":{"slug":"/Computer Science/스케줄링-알고리즘과-우선순위/","previous":{"fields":{"slug":"/TIL/virtualbox-+-putty-환경-구성하기/"},"frontmatter":{"title":"VirtualBox + PuTTY 환경 구성하기"}},"next":{"fields":{"slug":"/Computer Science/컴퓨터-구조에-대한-세-번째-이야기/"},"frontmatter":{"title":"컴퓨터 구조에 대한 세 번째 이야기"}}}}}
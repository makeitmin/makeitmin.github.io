{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/컴퓨터-구조에-대한-두-번째-이야기/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a1bf32b7-8e63-5887-8fc6-6b2f10416699","excerpt":"컴퓨터 구조의 접근방법 (1) 컴퓨터 디자인 CPU(하드웨어)를 디자인하는 것 하드웨어 전문가, 알고리즘 전문가, 인터페이스 전문가, 프로그래머 필요 명령어가 어떻게 구성되느냐에 따라 레지스터 구성되고, 레지스터 구성에 따라 하드웨어 디자인 \n→ 하드웨어 디자인과 레지스터-명령어 디자인은 병행 필요 레지스터와 명령어(컴파일러를 통해 만들어지는 명령어의 집합) 디자인 레지스터 디자인의 핵심 레지스터의 비트 수\n→ 보편적으로 n비트 시스템에서는 명령어가 n비트이기 때문에 레지스터도 n…","html":"<h2 id=\"컴퓨터-구조의-접근방법-1\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B0%A9%EB%B2%95-1\" aria-label=\"컴퓨터 구조의 접근방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터 구조의 접근방법 (1)</h2>\n<h3 id=\"컴퓨터-디자인\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-label=\"컴퓨터 디자인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터 디자인</h3>\n<ul>\n<li>CPU(하드웨어)를 디자인하는 것</li>\n<li>하드웨어 전문가, 알고리즘 전문가, 인터페이스 전문가, 프로그래머 필요</li>\n<li>명령어가 어떻게 구성되느냐에 따라 레지스터 구성되고, 레지스터 구성에 따라 하드웨어 디자인\n→ 하드웨어 디자인과 레지스터-명령어 디자인은 병행 필요</li>\n<li><strong>레지스터</strong>와 <strong>명령어</strong>(컴파일러를 통해 만들어지는 명령어의 집합) 디자인</li>\n</ul>\n<h3 id=\"레지스터-디자인의-핵심\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0-%EB%94%94%EC%9E%90%EC%9D%B8%EC%9D%98-%ED%95%B5%EC%8B%AC\" aria-label=\"레지스터 디자인의 핵심 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레지스터 디자인의 핵심</h3>\n<ul>\n<li>레지스터의 비트 수\n→ 보편적으로 n비트 시스템에서는 명령어가 n비트이기 때문에 레지스터도 n비트로 설정</li>\n<li>레지스터 개수\n→ 다다익선</li>\n<li>레지스터 각각의 용도\n→ RAM이나 H/D과 같은 범용 메모리와는 다르게 특별한 목적이 할당된 칸이 존재\n→ 명령어가 단순화되고, 속도 향상</li>\n</ul>\n<h2 id=\"컴퓨터-구조의-접근방법-2\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B0%A9%EB%B2%95-2\" aria-label=\"컴퓨터 구조의 접근방법 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터 구조의 접근방법 (2)</h2>\n<p>명령어 디자인에 따라 ALU 도 결정 → ALU가 명령어를 읽어야 하기 때문</p>\n<h3 id=\"명령어-구성\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B5%AC%EC%84%B1\" aria-label=\"명령어 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어 구성</h3>\n<p>각 부분에 비트를 조합하여 할당 → 명령어의 종류에 따라 명령어 구성(설계)이 상이</p>\n<ul>\n<li>예약</li>\n<li>연산자</li>\n<li>저장소\n→ 연산 결과는 레지스터에 저장</li>\n<li>피연산자\n→ 레지스터 주소 or 숫자 구분하기 위해 첫 비트를 구분자로 약속\n→ 표현할 수 있는 숫자가 많지 않음</li>\n</ul>\n<h3 id=\"명령어-구조-종류\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B5%AC%EC%A1%B0-%EC%A2%85%EB%A5%98\" aria-label=\"명령어 구조 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어 구조 종류</h3>\n<ul>\n<li>CISC 계열\n→ 복잡한 명령어, 다양한 형태로 조합\n→ 일정 수준 이상 속도를 향상시킬 수 없음</li>\n<li>RISC 계열\n→ CISC의 명령어를 간소화\n→ 제한사항 존재\n→ 오늘날 대부분의 CPU에 적용\n→ Fetch, Decode, Execution 을 각각 1클럭에 수행할 때, 여러 명령어 동시에 실행 가능\n→ CISC 보다 적은 클럭 수를 가지고 같은 양의 명령 수행 가능</li>\n</ul>\n<h2 id=\"load--store-명령어-디자인\" style=\"position:relative;\"><a href=\"#load--store-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-label=\"load  store 명령어 디자인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LOAD &#x26; STORE 명령어 디자인</h2>\n<h3 id=\"load-명령어\" style=\"position:relative;\"><a href=\"#load-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"load 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LOAD 명령어</h3>\n<ul>\n<li>레지스터로 피연산자의 메모리 주소를 불러들이는 명령</li>\n<li>명령어 구조\n→ 예약\n→ LOAD\n→ destination\n→ source</li>\n</ul>\n<h3 id=\"store-명령어\" style=\"position:relative;\"><a href=\"#store-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"store 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STORE 명령어</h3>\n<ul>\n<li>연산 결과를 레지스터에 저장</li>\n<li>명령어 구조\n→ 예약\n→ STORE\n→ source\n→ destination</li>\n</ul>\n<h3 id=\"load-와-store-의-필요성\" style=\"position:relative;\"><a href=\"#load-%EC%99%80-store-%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"load 와 store 의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LOAD 와 STORE 의 필요성</h3>\n<ul>\n<li>명령어 제한\n→ 사칙연산의 피연산자는 숫자 or 레지스터 주소\n→ 연산 결과는 레지스터에 저장\n→ 모든 연산은 레지스터를 통해 진행</li>\n</ul>\n<h3 id=\"레지스터를-통한-연산\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%97%B0%EC%82%B0\" aria-label=\"레지스터를 통한 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레지스터를 통한 연산</h3>\n<p><strong>LOAD r1, 0x10</strong> (0x10 에 있는 피연산자 호출하여 r1에 할당)<br>\n<strong>LOAD r2, 0x20</strong> (0x20 에 있는 피연산자 호출하여 r2에 할당)  </p>\n<p><strong>ADD r3, r1, r2</strong> (r1 과 r2 를 ADD 연산 하여 r3 에 할당)  </p>\n<p><strong>STORE r3, 0x30</strong> (r3 의 값을 0x30 에 저장)</p>\n<h2 id=\"메모리를-참조하는-방법\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"메모리를 참조하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리를 참조하는 방법</h2>\n<h3 id=\"direct-모드\" style=\"position:relative;\"><a href=\"#direct-%EB%AA%A8%EB%93%9C\" aria-label=\"direct 모드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Direct 모드</h3>\n<ul>\n<li>메모리 주소를 레지스터에 바로 할당\n→ LOAD r1, 0x10 (0x10 값을 r1 에 할당)</li>\n</ul>\n<h3 id=\"indirect-모드\" style=\"position:relative;\"><a href=\"#indirect-%EB%AA%A8%EB%93%9C\" aria-label=\"indirect 모드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indirect 모드</h3>\n<ul>\n<li>메모리 주소에 있는 번지수를 참조하여 해당 번지에 있는 값을 레지스터에 할당\n→ LOAD r1, [0x10] (0x10 에 있는 번지수를 참조하여 그 값을 r1 에 할당)</li>\n</ul>\n<h3 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h3>\n<ul>\n<li>현재의 비트 수로는 주소나 값을 표현하기 어려움</li>\n</ul>\n<h3 id=\"해결법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B2%95\" aria-label=\"해결법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결법</h3>\n<p><strong>LOAD r1, 0x0010</strong> (0x0010 에 있는 피연산자 호출하여 r1에 할당)  </p>\n<p><strong>MUL r0, 4, 4</strong> (4와 4를 곱셈하여 16을 r0에 할당)<br>\n<strong>MUL r2, 4, 4</strong> (4와 4를 곱셈하여 16을 r2에 할당)<br>\n<strong>MUL r3, r0, r2</strong> (r0와 r2를 곱셈하여 256, 즉 0x100 을 r3에 할당)  </p>\n<p><strong>STORE r3, 0x0030</strong> (r3 의 값을 0x0030 에 저장)<br>\n<strong>LOAD r2, [0x0030]</strong> (0x0030 에 있는 번지수를 참조하여 그 값을 r2 에 할당)  </p>\n<p><strong>ADD r3, r1, r2</strong></p>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>뇌를 자극하는 윈도우즈 시스템 프로그래밍 (<a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9788979144611&#x26;orderClick=LEa&#x26;Kc=\">도서</a>, <a href=\"https://www.inflearn.com/course/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">강의</a>)</li>\n</ul>","frontmatter":{"title":"컴퓨터 구조에 대한 두 번째 이야기","date":"2021-07-11"}}},"pageContext":{"slug":"/Computer Science/컴퓨터-구조에-대한-두-번째-이야기/","previous":{"fields":{"slug":"/Computer Science/아스키코드-vs-유니코드/"},"frontmatter":{"title":"아스키코드 vs 유니코드"}},"next":{"fields":{"slug":"/Computer Science/프로세스의-생성과-소멸/"},"frontmatter":{"title":"프로세스의 생성과 소멸"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/쓰레드의-이해/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"183e3de8-5327-5dc6-b9c9-f8d1e911cdb1","excerpt":"멀티프로세스와 쓰레드 멀티프로세스는 둘 이상의 프로그램을 실행하기 위해서 필요 쓰레드의 등장 부모 프로세스의 구성   Code 영역: 프로그램 코드 Data 영역: 전역 변수 Heap 영역: 동적 할당 메모리 공간 Stack 영역: 지역 변수, 매개 변수 부모 프로세스에서 여러 자식 프로세스가 생성될 경우 프로세스 간 컨텍스트 스위칭 문제가 발생하여 시스템에 부하 (부모) 프로세스에서 쓰레드를 사용할 경우 Code, Data, Heap 영역을 공유하고, 코드 내에…","html":"<h2 id=\"멀티프로세스와-쓰레드\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"멀티프로세스와 쓰레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티프로세스와 쓰레드</h2>\n<p>멀티프로세스는 둘 이상의 프로그램을 실행하기 위해서 필요</p>\n<h3 id=\"쓰레드의-등장\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EB%93%B1%EC%9E%A5\" aria-label=\"쓰레드의 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드의 등장</h3>\n<p>부모 프로세스의 구성  </p>\n<ul>\n<li>Code 영역: 프로그램 코드</li>\n<li>Data 영역: 전역 변수</li>\n<li>Heap 영역: 동적 할당 메모리 공간</li>\n<li>Stack 영역: 지역 변수, 매개 변수</li>\n</ul>\n<p><strong>부모 프로세스에서 여러 자식 프로세스가 생성될 경우</strong></p>\n<ul>\n<li>프로세스 간 컨텍스트 스위칭 문제가 발생하여 시스템에 부하</li>\n</ul>\n<p><strong>(부모) 프로세스에서 쓰레드를 사용할 경우</strong></p>\n<ul>\n<li>Code, Data, Heap 영역을 공유하고, 코드 내에 2개의 흐름(쓰레드) 생성</li>\n<li>각각의 쓰레드 Stack을 별도로 관리하면 자식 프로세스의 생성 불필요</li>\n</ul>\n<h3 id=\"프로세스와-쓰레드의-차이점\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"프로세스와 쓰레드의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스와 쓰레드의 차이점</h3>\n<ul>\n<li>프로세스는 서로 함수 호출이 불가 (IPC 통신을 이용하여 교류)</li>\n<li>쓰레드는 서로 메모리 공간을 공유하기 때문에 함수 호출 가능</li>\n</ul>\n<h3 id=\"windows에서의-프로세스와-쓰레드\" style=\"position:relative;\"><a href=\"#windows%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"windows에서의 프로세스와 쓰레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Windows에서의 프로세스와 쓰레드</h3>\n<ul>\n<li>실제로 Windows에서 스케줄러가 관리하는 것은 각 프로세스의 쓰레드</li>\n<li>Windows에서는 프로세스 상태 정보를 쓰레드가 보유</li>\n<li>실행 흐름의 주체는 쓰레드 (메인함수 = 메인 쓰레드)</li>\n</ul>\n<p><strong>쓰레드가 실행될 수 있는 환경을 제공해주는 것이 프로세스고, 그 안에서 쓰레드가 동작</strong></p>\n<h2 id=\"쓰레드-구현-모델에-따른-구분\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C-%EA%B5%AC%ED%98%84-%EB%AA%A8%EB%8D%B8%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B5%AC%EB%B6%84\" aria-label=\"쓰레드 구현 모델에 따른 구분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드 구현 모델에 따른 구분</h2>\n<h3 id=\"커널-레벨-쓰레드\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%84%90-%EB%A0%88%EB%B2%A8-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"커널 레벨 쓰레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커널 레벨 쓰레드</h3>\n<p>커널이 API 형태로 쓰레드 기능을 지원</p>\n<ul>\n<li>쓰레드의 정보를 커널이 알고 있고 스케줄러가 직접 쓰레드를 관리</li>\n<li>쓰레드가 I/O 상태로 넘어갈 때 다른 쓰레드로 전환</li>\n</ul>\n<h3 id=\"유저-레벨-쓰레드\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A0%80-%EB%A0%88%EB%B2%A8-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"유저 레벨 쓰레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유저 레벨 쓰레드</h3>\n<p>유저가 만든 라이브러리 형태로 쓰레드 기능을 지원</p>\n<ul>\n<li>프로세스의 정보를 커널이 알고 있고, 스케줄러가 프로세스를 관리하며 그 안에서 쓰레드가 동작</li>\n<li>프로세스 단위로 실행되기 때문에 쓰레드가 I/O 상태(Blocked)로 넘어갈 때 해당 프로세스 안에 다른 쓰레드가 대기하고 있더라도 순서가 통째로 다른 프로세스로 전환</li>\n</ul>\n<p><strong>스케줄러가 쓰레드에 시간을 할당하는지(커널 레벨 쓰레드)와 프로세스에 시간을 할당하는지(유저 레벨 쓰레드)에 따라 할당받는 시간의 비율이 상이</strong></p>\n<h2 id=\"커널-모드와-유저-모드\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%84%90-%EB%AA%A8%EB%93%9C%EC%99%80-%EC%9C%A0%EC%A0%80-%EB%AA%A8%EB%93%9C\" aria-label=\"커널 모드와 유저 모드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커널 모드와 유저 모드</h2>\n<p>유저 영역에서 커널 영역의 메모리 공간에 접근하여 바꾸는 오류 가능성 존재</p>\n<ul>\n<li>커널 영역이 실행될 때는 커널 모드가 실행되어 메모리 공간 어디에도 접근 가능</li>\n<li>유저 영역이 실행될 때는 커널 영역으로는 접근 불가하도록 제한</li>\n</ul>\n<h3 id=\"유저-영역에서-커널-영역으로-전환하는-경우\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A0%80-%EC%98%81%EC%97%AD%EC%97%90%EC%84%9C-%EC%BB%A4%EB%84%90-%EC%98%81%EC%97%AD%EC%9C%BC%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"유저 영역에서 커널 영역으로 전환하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유저 영역에서 커널 영역으로 전환하는 경우</h3>\n<ul>\n<li>\n<p>커널이 동작해야 할 경우</p>\n<ul>\n<li>스케줄러가 동작할 때</li>\n<li>(자식) 프로세스 생성할 때</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"커널-레벨-쓰레드의-장점-및-단점\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%84%90-%EB%A0%88%EB%B2%A8-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90-%EB%B0%8F-%EB%8B%A8%EC%A0%90\" aria-label=\"커널 레벨 쓰레드의 장점 및 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커널 레벨 쓰레드의 장점 및 단점</h3>\n<ul>\n<li>장점: 커널에서 직접 제공해주기 때문에 안전성과 다양한 기능성 제공</li>\n<li>단점: 유저 모드에서 커널 모드로의 전환이 빈번하여 속도 저하</li>\n</ul>\n<h3 id=\"유저-레벨-쓰레드의-장점-및-단점\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A0%80-%EB%A0%88%EB%B2%A8-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90-%EB%B0%8F-%EB%8B%A8%EC%A0%90\" aria-label=\"유저 레벨 쓰레드의 장점 및 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유저 레벨 쓰레드의 장점 및 단점</h3>\n<ul>\n<li>장점: 유저 모드에서 커널 모드로의 전환이 불필요하여 속도 향상</li>\n<li>단점: 쓰레드 단위 컨텍스트 스위칭이 불가하여 프로세스 단위의 블로킹 발생</li>\n</ul>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>뇌를 자극하는 윈도우즈 시스템 프로그래밍 (<a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9788979144611&#x26;orderClick=LEa&#x26;Kc=\">도서</a>, <a href=\"https://www.inflearn.com/course/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">강의</a>)</li>\n</ul>","frontmatter":{"title":"쓰레드의 이해","date":"2021-08-29"}}},"pageContext":{"slug":"/Computer Science/쓰레드의-이해/","previous":{"fields":{"slug":"/TIL/django-orm에서-레코드-단위-데이터-불러오기/"},"frontmatter":{"title":"Django ORM에서 레코드 단위의 데이터 불러오기"}},"next":{"fields":{"slug":"/TIL/django-orm에서-func()-사용하기/"},"frontmatter":{"title":"Django ORM에서 Func() 사용하기"}}}}}
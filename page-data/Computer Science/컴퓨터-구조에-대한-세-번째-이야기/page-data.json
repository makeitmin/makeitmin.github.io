{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/컴퓨터-구조에-대한-세-번째-이야기/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","author":"Seongmin Ha","siteUrl":"https://makeitmin.github.io","comment":{"disqusShortName":"","utterances":"makeitmin/makeitmin.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"03a7546c-35d4-5532-9b4b-4afcdc02690d","excerpt":"함수를 호출할 때 수행되는 작업 함수 호출 인자 전달 지역 변수 처리 실행의 이동 절차적 함수 호출(Procedure Call) 지원 CPU 모델 스택 프레임 (Stack Frame) 임의의 함수 내에서 선언된 메모리 공간 메인함수의 데이터 블럭 스택 프레임 레지스터 (Stack Frame Register) 함수를 호출할 때마다 어디까지 메모리 공간을 할당했는지 기억하는 레지스터 프레임 포인터 레지스터 (Frame Pointer Register…","html":"<p>함수를 호출할 때 수행되는 작업</p>\n<ul>\n<li>함수 호출 인자 전달</li>\n<li>지역 변수 처리</li>\n<li>실행의 이동</li>\n</ul>\n<h2 id=\"절차적-함수-호출procedure-call-지원-cpu-모델\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8%EC%A0%81-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9Cprocedure-call-%EC%A7%80%EC%9B%90-cpu-%EB%AA%A8%EB%8D%B8\" aria-label=\"절차적 함수 호출procedure call 지원 cpu 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차적 함수 호출(Procedure Call) 지원 CPU 모델</h2>\n<h3 id=\"스택-프레임-stack-frame\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%ED%94%84%EB%A0%88%EC%9E%84-stack-frame\" aria-label=\"스택 프레임 stack frame permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 프레임 (Stack Frame)</h3>\n<ul>\n<li>임의의 함수 내에서 선언된 메모리 공간</li>\n<li>메인함수의 데이터 블럭</li>\n</ul>\n<p><strong>스택 프레임 레지스터 (Stack Frame Register)</strong></p>\n<ul>\n<li>함수를 호출할 때마다 어디까지 메모리 공간을 할당했는지 기억하는 레지스터</li>\n</ul>\n<p><strong>프레임 포인터 레지스터 (Frame Pointer Register)</strong></p>\n<ul>\n<li>함수 실행 후 반환 주소를 기억하는 레지스터</li>\n</ul>\n<p><strong>함수가 값을 반환한다는 것의 의미</strong></p>\n<ul>\n<li>함수 호출 이전의 상태를 스택 프레임 레지스터가 가리키도록 하는 것</li>\n<li>스택 프레임 레지스터의 값이 증가할 때, 함수 호출 이전의 상태를 프레임 포인터 레지스터에 저장</li>\n</ul>\n<p><strong>함수가 연쇄적으로 호출될 경우</strong></p>\n<ul>\n<li>프레임 포인터 레지스터는 연쇄적으로 반환 주소를 저장</li>\n<li>저장해야 하는 반환 주소가 많아 Stack 메모리를 활용</li>\n</ul>\n<h2 id=\"함수-호출-인자의-전달과-push--pop-명령어-디자인\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EC%9D%B8%EC%9E%90%EC%9D%98-%EC%A0%84%EB%8B%AC%EA%B3%BC-push--pop-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-label=\"함수 호출 인자의 전달과 push  pop 명령어 디자인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 호출 인자의 전달과 PUSH &#x26; POP 명령어 디자인</h2>\n<p>전달되는 인자도 지역변수처럼 Stack에 적재 (인자와 지역변수의 Life Cycle 일치)</p>\n<ol>\n<li>\n<p>PUSH</p>\n<ul>\n<li>STORE를 활용한 인자값 저장<br>\n<strong>ADD r1, 7, 0</strong><br>\n<strong>STORE sp, 0x40</strong><br>\n<strong>STORE r1, [0x40]</strong><br>\n<strong>ADD sp, sp, 4</strong></li>\n</ul>\n</li>\n<li>\n<p>POP </p>\n<ul>\n<li>ADD나 SUB를 활용한 인자값 호출<br>\n<strong>ADD sp, sp, -4</strong><br>\n<strong>SUB sp, sp, 4</strong></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"호출-규약과-실행의-이동\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%B6%9C-%EA%B7%9C%EC%95%BD%EA%B3%BC-%EC%8B%A4%ED%96%89%EC%9D%98-%EC%9D%B4%EB%8F%99\" aria-label=\"호출 규약과 실행의 이동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출 규약과 실행의 이동</h2>\n<p><strong>프로그램 카운터 (Program Counter)</strong></p>\n<ul>\n<li>스택 프레임 레지스터와 유사한 역할 수행</li>\n<li>프로그램이 순차적으로 실행되도록 값을 기억하는 역할</li>\n<li>함수 내에서 다른 함수 호출 시 함수에서 함수로 실행을 이동시키기 위해 필요</li>\n</ul>\n<p><strong>링크 레지스터 (Link Register)</strong></p>\n<ul>\n<li>프레임 포인터 레지스터와 유사한 역할 수행</li>\n<li>프로그램 카운터가 갖고 있던 이전 상태를 저장</li>\n<li>Stack 메모리를 활용하여 이전 상태들을 저장</li>\n</ul>\n<p><strong>함수 호출 규약</strong></p>\n<ul>\n<li>인자의 전달 방향이 일치하도록</li>\n<li>반환 작업은 하나의 함수에만</li>\n<li>Stack 공간을 청소하는 주체를 지정</li>\n<li>Stack 방향 지정 (C Style 등)</li>\n<li>32bit보다 64bit가 매개변수를 저장하는 레지스터를 많이 사용하여 더 빠른 속도 보유</li>\n</ul>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>뇌를 자극하는 윈도우즈 시스템 프로그래밍 (<a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9788979144611&#x26;orderClick=LEa&#x26;Kc=\">도서</a>, <a href=\"https://www.inflearn.com/course/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">강의</a>)</li>\n</ul>","frontmatter":{"title":"컴퓨터 구조에 대한 세 번째 이야기","date":"2021-08-22"}}},"pageContext":{"slug":"/Computer Science/컴퓨터-구조에-대한-세-번째-이야기/","previous":{"fields":{"slug":"/Computer Science/스케줄링-알고리즘과-우선순위/"},"frontmatter":{"title":"스케줄링 알고리즘과 우선순위"}},"next":null}}}
{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"makeitmin.io","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"쓰레드의 생성 생성 가능한 쓰레드의 개수는 할당 가능한 스택 메모리의 최대치 쓰레드의 소멸 일반적으로 안정적인 소프트웨어는 Life Cycle이 메인에서 시작하고 종료 쓰레드 종료 시 return을 이용하면 좋은 경우 모든 함수가 return을 마치고 나서 메인 함수에서 return(종료)을 할 때 쓰레드 종료 시 ExitThread 함수 호출이 유용한 …","fields":{"slug":"/Computer Science/쓰레드의-생성과-소멸/"},"frontmatter":{"date":"September 06, 2021","title":"쓰레드의 생성과 소멸","category":"Computer Science","draft":false}}},{"node":{"excerpt":"Django 프로젝트에 소셜 로그인을 추가해보기로 했다.  패키지를 설치하고, Google OAuth를 연동하여 소셜 로그인을 하는 방법은 검색하면 많이 나왔다. 아무래도 소셜 로그인이라는 것이, 자체 회원가입 절차를 간소화할 수 있어서 사용하는 방법이다 보니 자체 회원가입과 소셜 로그인을 굳이 모두 구현하는 시도는 흔하지 않았다. 하지만 사용자에게 (G…","fields":{"slug":"/TIL/django-소셜-로그인(google-oauth)-구현하기/"},"frontmatter":{"date":"September 02, 2021","title":"Django 소셜 로그인(Google OAuth) 구현하기","category":"TIL","draft":false}}},{"node":{"excerpt":"오늘 Django ORM Query 코드를 보다가 중간중간 Func()이라는 함수를 발견했다. 모르고 있던 함수여서 검색을 했는데, 감이 잘 안 잡혀서 동료 분한테 다시 여쭤보고 정리할 수 있었다. Func()의 개념과 구성 요소 Func()는 ORM이 자체 함수로 지원하지 않는 데이터베이스 함수를 개발자가 직접 적용할 수 있도록 해주는 함수이다. Fun…","fields":{"slug":"/TIL/django-orm에서-func()-사용하기/"},"frontmatter":{"date":"August 31, 2021","title":"Django ORM에서 Func() 사용하기","category":"TIL","draft":false}}},{"node":{"excerpt":"멀티프로세스와 쓰레드 멀티프로세스는 둘 이상의 프로그램을 실행하기 위해서 필요 쓰레드의 등장 부모 프로세스의 구성   Code 영역: 프로그램 코드 Data 영역: 전역 변수 Heap 영역: 동적 할당 메모리 공간 Stack 영역: 지역 변수, 매개 변수 부모 프로세스에서 여러 자식 프로세스가 생성될 경우 프로세스 간 컨텍스트 스위칭 문제가 발생하여 시스…","fields":{"slug":"/Computer Science/쓰레드의-이해/"},"frontmatter":{"date":"August 29, 2021","title":"쓰레드의 이해","category":"Computer Science","draft":false}}},{"node":{"excerpt":"Django ORM Query를 사용하면서, 레코드 단위로 한 줄씩 데이터를 불러오는 경우를 구현할 일이 생겼다. 접속이 뜸해 특정 유형으로 전환되는 사용자에게 메일을 보내는 일반 배치 프로그램이었는데, 단순히 생각하면 대상이 되는 사용자를 filter 메소드로 일괄 불러와서 로직을 처리해야겠다는 생각이 들 수도 있다.   하지만, 한꺼번에 불러와서 메일…","fields":{"slug":"/TIL/django-orm에서-레코드-단위-데이터-불러오기/"},"frontmatter":{"date":"August 27, 2021","title":"Django ORM에서 레코드 단위의 데이터 불러오기","category":"TIL","draft":false}}},{"node":{"excerpt":"Django Custom Command는 특정 앱 내부의 특정 함수를 커맨드로 사용할 수 있는 기능이다. 더 쉽게 말하면, 개발자가 Django 앱 내부에 원하는 동작을 함수로 구현하고, 이를 커맨드로 manage.py에 등록하여 사용하는 개념이다.    다음 순서로 Django Custom Command를 구현할 것이다.   Django 앱 생성하기  …","fields":{"slug":"/TIL/django-custom-command-구현하기/"},"frontmatter":{"date":"August 26, 2021","title":"Django Custom Command 구현하기","category":"TIL","draft":false}}},{"node":{"excerpt":"만들고자 하는 화면의 반응형 기준은 총 4가지(1440px / 992px / 768px / 576px)였다. Bootstrap 만으로는 한계가 있어 CSS 파일에 Media Query를 작성했는데, 이상하게도 화면을 아무리 줄여봐도  값이 줄어들지 않았다. 예를 들어 HTML에 이런 코드를 작성하고, CSS에 이런 코드를 작성했다. 창 크기를 1440px…","fields":{"slug":"/TIL/media-query에서-font-size-줄이기/"},"frontmatter":{"date":"August 23, 2021","title":"Media Query에서 font-size 줄이기","category":"TIL","draft":false}}},{"node":{"excerpt":"함수를 호출할 때 수행되는 작업 함수 호출 인자 전달 지역 변수 처리 실행의 이동 절차적 함수 호출(Procedure Call) 지원 CPU 모델 스택 프레임 (Stack Frame) 임의의 함수 내에서 선언된 메모리 공간 메인함수의 데이터 블럭 스택 프레임 레지스터 (Stack Frame Register) 함수를 호출할 때마다 어디까지 메모리 공간을 할…","fields":{"slug":"/Computer Science/컴퓨터-구조에-대한-세-번째-이야기/"},"frontmatter":{"date":"August 22, 2021","title":"컴퓨터 구조에 대한 세 번째 이야기","category":"Computer Science","draft":false}}},{"node":{"excerpt":"스케줄러의 동작 방식에 따른 OS 종류 일반 OS와 리얼타임 OS(RTOS) 실행속도는 CPU의 성능에 종속적 (OS 이슈 X) 핵심은 시작시각: RTOS가 일반 OS보다 빠른 시작 (응답성이 우수) 클럭 관점의 타임슬라이스를 기준으로 프로세스의 실행 주기 변화 일반 OS는 타임슬라이스가 길어 느린 시작 RTOS는 타임슬라이스가 짧아 빠른 시작 선점형 O…","fields":{"slug":"/Computer Science/스케줄링-알고리즘과-우선순위/"},"frontmatter":{"date":"August 08, 2021","title":"스케줄링 알고리즘과 우선순위","category":"Computer Science","draft":false}}},{"node":{"excerpt":"회사에서 사용하기로 한 개발환경은 VirtualBox에 가상 환경을 올리고, PuTTY를 통해 접속하는 형태이다. 가상 환경은 이미 만들어두신 OVA 형식의 이미지가 있어서, 복사를 받아서 올리기만 하면 됐다. 각 환경 구성 방법과 오류가 발생하여 해결한 기록을 남겨두려고 한다. VirtualBox 환경 구성하기 VirtualBox 설치 파일과 확장팩 다…","fields":{"slug":"/TIL/virtualbox-+-putty-환경-구성하기/"},"frontmatter":{"date":"August 06, 2021","title":"VirtualBox + PuTTY 환경 구성하기","category":"TIL","draft":false}}},{"node":{"excerpt":"이때까지 사용해본 웹 프레임워크는 Spring과 Flask가 있었다. Spring은 Java를 사용하던 3학년 때 전자정부표준프레임워크(eGovFrame)을 사용했던 경험으로 알고 있었고, Flask는 지난 6개월 간 엘리스 AI 트랙에서 수행한 프로젝트에서 백엔드 프레임워크로 사용하며 경험하였다. Spring은 MVC 패턴을 따르는 프레임워크로, 데이터…","fields":{"slug":"/TIL/django-시작하기-(feat.-postgresql)/"},"frontmatter":{"date":"August 03, 2021","title":"Django 시작하기 (feat. PostgreSQL)","category":"TIL","draft":false}}},{"node":{"excerpt":"기존에 사용한 경험이 있는 데이터베이스는 MySQL과 MongoDB가 있었다. 관계형 데이터베이스(RDB)로 범위를 줄이면 MySQL 정도였고, 엘리스 AI 트랙에서 했던 프로젝트 중에 백엔드를 Django와 PostgreSQL로 구성한 프로젝트가 있었다. 나는 그 프로젝트에서 프론트엔드를 맡았고 Django를 애초에 몰랐기에 백엔드 코드를 자세히 보지 …","fields":{"slug":"/TIL/postgresql-시작하기-(feat.-django)/"},"frontmatter":{"date":"August 03, 2021","title":"PostgreSQL 시작하기 (feat. Django)","category":"TIL","draft":false}}},{"node":{"excerpt":"커널 모든 운영체제에 존재하는 핵심 모듈 커널의 기능을 추가하고 보강한 것이 현대의 운영체제 커널 오브젝트 커널에 의해 관리되는 리소스 정보를 담고 있는 데이터 블록 프로세스 생성 시 구조체의 형태로 함께 생성 프로세스의 상태 정보, 우선 순위 정보 저장 리소스마다 관리되어야 하는 정보가 다르기 때문에 각기 디자인 프로그래머가 직접적으로 접근 불가 운영체…","fields":{"slug":"/Computer Science/커널-오브젝트에-대한-이해/"},"frontmatter":{"date":"July 31, 2021","title":"커널 오브젝트에 대한 이해","category":"Computer Science","draft":false}}},{"node":{"excerpt":"프로세스 프로세스란 프로세스별로 할당받는 리소스를 모두 포함하는 개념 가상 메모리 공간 + 프로세스 별로 독립적으로 사용하게 되는 레지스터 셋 RAM 보다 더 큰 메모리 공간을 할당받았을 경우, 까지 사용 레지스터 셋은 현재 실행 중인 1개 프로세스의 정보를 보유 멀티스레드, 멀티프로세스 환경에서 성능을 높이는 이슈 레지스터 셋 1개당 프로세스 1개를 할…","fields":{"slug":"/Computer Science/프로세스의-생성과-소멸/"},"frontmatter":{"date":"July 18, 2021","title":"프로세스의 생성과 소멸","category":"Computer Science","draft":false}}},{"node":{"excerpt":"컴퓨터 구조의 접근방법 (1) 컴퓨터 디자인 CPU(하드웨어)를 디자인하는 것 하드웨어 전문가, 알고리즘 전문가, 인터페이스 전문가, 프로그래머 필요 명령어가 어떻게 구성되느냐에 따라 레지스터 구성되고, 레지스터 구성에 따라 하드웨어 디자인 \n→ 하드웨어 디자인과 레지스터-명령어 디자인은 병행 필요 레지스터와 명령어(컴파일러를 통해 만들어지는 명령어의 집…","fields":{"slug":"/Computer Science/컴퓨터-구조에-대한-두-번째-이야기/"},"frontmatter":{"date":"July 11, 2021","title":"컴퓨터 구조에 대한 두 번째 이야기","category":"Computer Science","draft":false}}},{"node":{"excerpt":"문자셋의 종류 SBCS(Single Byte Character Set) 1바이트 문자 표현 ASCII CODE printf, scanf, fgets, fputs 함수 MBCS(Multi Byte Character Set) 1바이트 or 2바이트 문자 표현 WBCS(Wide Byte Character Set) 2바이트 문자 표현 UNICODE wprintf…","fields":{"slug":"/Computer Science/아스키코드-vs-유니코드/"},"frontmatter":{"date":"June 28, 2021","title":"아스키코드 vs 유니코드","category":"Computer Science","draft":false}}},{"node":{"excerpt":"컴퓨터 구조와 운영체제 컴퓨터 구조 CPU (중앙처리장치) Cache 운영체제 메인 메모리 (램) 하드디스크 컴퓨터 하드웨어의 구성 및 CPU 이해 CPU ALU: 연산(산술/논리)을 담당 컨트롤 유닛: 실행파일(컴파일된 명령어)를 해석하여 다른 블록에 전송 레지스터: 각 블록이 필요로 하는 요소(명령어/피연산자)를 저장해두고 요청이 올 때 제공 버스 인…","fields":{"slug":"/Computer Science/컴퓨터-구조에-대한-첫-번째-이야기/"},"frontmatter":{"date":"June 24, 2021","title":"컴퓨터 구조에 대한 첫 번째 이야기","category":"Computer Science","draft":false}}},{"node":{"excerpt":"이 글의 Code Snippets는 Jupyter Notebook에서 Code Shell 단위로 실행된다. 코드 전문은 GitHub Repository에 있다.   YOLO는 Darknet이라는 프레임워크를 사용한다. Darknet은 YOLOv4 뿐 아니라 다양한 버전의 YOLO 모델을 서빙하고 있다. 해당 Darknet Repository의 README…","fields":{"slug":"/Project/yolov4-+-deepfashion2-로-object-detection-학습하기/"},"frontmatter":{"date":"May 25, 2021","title":"YOLOv4 + DeepFashion2로 Object Detection 학습하기","category":"Project","draft":false}}},{"node":{"excerpt":"사실 Docker는 쓸 생각이 없었다. 그냥 로컬에서 작업할 계획이었는데, 기존에 설치된 React를 비롯한 각종 모듈과 Gatsby가 버전 충돌을 일으키며 이틀 밤낮을 붙잡아도 해결될 기미가 보이지 않았다(..) 그래서 Docker를 이용해서 깨끗한 새로운 환경에서 블로그를 만들어 보기로 했다. 블로그를 만들 순서는 다음과 같다. Docker 환경 세팅…","fields":{"slug":"/Project/docker-+-gatsby-+-github-pages로-블로그-만들기/"},"frontmatter":{"date":"March 28, 2021","title":"Docker + Gatsby + GitHub Pages로 블로그 만들기","category":"Project","draft":false}}},{"node":{"excerpt":"Code 이전하기 (간단) Issues, Milestones, Merge Request 이전하기 (복잡)   시작하기 전에 Merge Request를 이전하는 것은 open 되어 있는 것들만 가능하다. GitHub API 정책상 Merge Request를 Pull Request로 옮기는 것은 Target 브랜치와 Source 브랜치 간의 커밋 차이가 있어…","fields":{"slug":"/Git/gitlab에서-github로-repository-이전하기/"},"frontmatter":{"date":"March 27, 2021","title":"GitLab에서 GitHub로 Repository 이전하기","category":"Git","draft":false}}},{"node":{"excerpt":"Docker 이미지 받아오기 이전 글에서 생성했던 Docker 이미지, 그러니까 프로젝트 팀원들에게 배포하기 위해 생성한 Docker 이미지는 Docker Hub의 개인 레포지토리에 있다. 이 이미지를 끌어와서 간단하게 동일한 개발환경을 세팅할 수 있다. 다음 명령어로 이미지가 잘 가져와졌는지 확인한다. Docker 컨테이너 생성 및 실행 이미지를 잘 가…","fields":{"slug":"/Docker/docker-환경-구성하기-03/"},"frontmatter":{"date":"January 29, 2021","title":"Docker 환경 구성하기 03","category":"Docker","draft":false}}},{"node":{"excerpt":"Docker 환경을 구성하는 것에는 2가지 방법이 있다. 직접 환경(이미지)을 생성하는 방법 다른 사람이 만들어 배포한 환경(이미지)를 받아 사용하는 방법 여기에서는 1번을 먼저 설명한다. 2번은 다음 글에서 설명할 예정이다. Dockerfile 작성 Dockerfile 이란? Dockerfile은 Docker 개발환경을 만들 때 작성하는 명세 같은 파일…","fields":{"slug":"/Docker/docker-환경-구성하기-02/"},"frontmatter":{"date":"January 28, 2021","title":"Docker 환경 구성하기 02","category":"Docker","draft":false}}},{"node":{"excerpt":"Docker 환경을 구성하기에 앞서, 알아두어야 할 점은 Docker는 Linux 환경 위에 올려야 한다는 점이다. 사용하고 있는 기본 OS가 Linux 환경이라면, 그냥 Docker를 설치하면 된다. 하지만, 여기서는 Windows 환경에서 Docker를 설치하기 위해 Linux 가상환경을 구성하는 단계부터 시작해보려고 한다. WSL2 환경 구성하기 W…","fields":{"slug":"/Docker/docker-환경-구성하기-01/"},"frontmatter":{"date":"January 27, 2021","title":"Docker 환경 구성하기 01","category":"Docker","draft":false}}}]}},"pageContext":{}}}
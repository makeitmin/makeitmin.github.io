<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[makeitmin.io]]></title><description><![CDATA[휘발되지 않는 멋쟁이 개발자 되기]]></description><link>https://makeitmin.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 22 Jul 2021 08:04:19 GMT</lastBuildDate><item><title><![CDATA[프로세스의 생성과 소멸]]></title><description><![CDATA[프로세스 프로세스란 프로세스별로 할당받는 리소스를 모두 포함하는 개념 가상 메모리 공간 + 프로세스 별로 독립적으로 사용하게 되는 레지스터 셋 RAM 보다 더 큰 메모리 공간을 할당받았을 경우, 까지 사용 레지스터 셋은 현재 실행 중인…]]></description><link>https://makeitmin.github.io/Computer Science/프로세스의-생성과-소멸/</link><guid isPermaLink="false">https://makeitmin.github.io/Computer Science/프로세스의-생성과-소멸/</guid><pubDate>Sun, 18 Jul 2021 16:37:25 GMT</pubDate><content:encoded>&lt;h2 id=&quot;프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;프로세스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스&lt;/h2&gt;
&lt;p&gt;프로세스란 프로세스별로 할당받는 리소스를 모두 포함하는 개념&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가상 메모리 공간 + 프로세스 별로 독립적으로 사용하게 되는 레지스터 셋&lt;/li&gt;
&lt;li&gt;RAM 보다 더 큰 메모리 공간을 할당받았을 경우, &lt;code class=&quot;language-text&quot;&gt;가상 메모리 공간&lt;/code&gt;까지 사용&lt;/li&gt;
&lt;li&gt;레지스터 셋은 현재 실행 중인 1개 프로세스의 정보를 보유&lt;/li&gt;
&lt;li&gt;멀티스레드, 멀티프로세스 환경에서 성능을 높이는 이슈&lt;/li&gt;
&lt;li&gt;레지스터 셋 1개당 프로세스 1개를 할당하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;스케줄러&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%9F%AC&quot; aria-label=&quot;스케줄러 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스케줄러&lt;/h2&gt;
&lt;p&gt;둘 이상의 프로세스가 적절히 실행되도록 컨트롤하는 작업 수행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스케줄러도 하나의 프로세스로 인식 가능&lt;/li&gt;
&lt;li&gt;스케줄러를 가급적 적게 가동할 수 있다면 좋은 운영체제&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로세스의-상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C&quot; aria-label=&quot;프로세스의 상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스의 상태&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Ready&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 전 프로세스들의 상태&lt;/li&gt;
&lt;li&gt;스케줄러가 Running 상태로 전환해 줄 때까지 대기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Running&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스케줄러가 선택한 프로세스가 실행 중인 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Blocked&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU에 의존적이지 않은 연산(I/O)이 머무르다가 완료되면 Ready 상태로 전환&lt;/li&gt;
&lt;li&gt;CPU에 의존적이지 않은 연산(I/O)과 CPU에 의존적인 연산(사칙연산)의 병행을 위해 존재&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;컨텍스트-스위칭&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%EC%9C%84%EC%B9%AD&quot; aria-label=&quot;컨텍스트 스위칭 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨텍스트 스위칭&lt;/h2&gt;
&lt;p&gt;둘 이상의 프로세스가 실행될 때 &lt;code class=&quot;language-text&quot;&gt;메모리&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;레지스터 셋&lt;/code&gt;에 들어가는 데이터를 전환하는 작업&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;대상이 많으면 많을수록 부담&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로세스의-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;프로세스의 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스의 생성&lt;/h2&gt;
&lt;p&gt;프로세스 생성 함수(CreateProcess)를 실행하기 위한 흐름&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LPSTARTUPINFO: 프로세스 특성 정보를 설정하는 구조체 (정보 전달)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구조체 변수의 크기: 전달되는 구조체를 구분&lt;/li&gt;
&lt;li&gt;콘솔 윈도우의 타이틀 바 제목&lt;/li&gt;
&lt;li&gt;프로세스 윈도우의 x, y 좌표&lt;/li&gt;
&lt;li&gt;프로세스 윈도우의 가로, 세로 길이&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CreateProcess: 구조체에서 전달받은 정보를 참조하여 프로세스 생성&lt;/li&gt;
&lt;li&gt;LPPROCESS_INFORMATION: 생성된 프로세스 정보가 채워지는 구조체 (정보 반환)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로세스-생성-조건&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;프로세스 생성 조건 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 생성 조건&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자식 프로세스&lt;/li&gt;
&lt;li&gt;부모 프로세스&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;표준 검색경로&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 중인 프로세스의 실행파일이 존재하는 디렉토리&lt;/li&gt;
&lt;li&gt;실행 중인 프로세스의 현재 디렉토리&lt;/li&gt;
&lt;li&gt;Windows의 시스템 디렉토리&lt;/li&gt;
&lt;li&gt;Windows 디렉토리&lt;/li&gt;
&lt;li&gt;환경변수 PATH에 의해 지정되어 있는 디렉토리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[컴퓨터 구조에 대한 두 번째 이야기]]></title><description><![CDATA[컴퓨터 구조의 접근방법 (1) 컴퓨터 디자인 CPU…]]></description><link>https://makeitmin.github.io/Computer Science/컴퓨터-구조에-대한-두-번째-이야기/</link><guid isPermaLink="false">https://makeitmin.github.io/Computer Science/컴퓨터-구조에-대한-두-번째-이야기/</guid><pubDate>Sun, 11 Jul 2021 18:08:10 GMT</pubDate><content:encoded>&lt;h2 id=&quot;컴퓨터-구조의-접근방법-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B0%A9%EB%B2%95-1&quot; aria-label=&quot;컴퓨터 구조의 접근방법 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조의 접근방법 (1)&lt;/h2&gt;
&lt;h3 id=&quot;컴퓨터-디자인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EB%94%94%EC%9E%90%EC%9D%B8&quot; aria-label=&quot;컴퓨터 디자인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 디자인&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU(하드웨어)를 디자인하는 것&lt;/li&gt;
&lt;li&gt;하드웨어 전문가, 알고리즘 전문가, 인터페이스 전문가, 프로그래머 필요&lt;/li&gt;
&lt;li&gt;명령어가 어떻게 구성되느냐에 따라 레지스터 구성되고, 레지스터 구성에 따라 하드웨어 디자인
→ 하드웨어 디자인과 레지스터-명령어 디자인은 병행 필요&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;레지스터&lt;/strong&gt;와 &lt;strong&gt;명령어&lt;/strong&gt;(컴파일러를 통해 만들어지는 명령어의 집합) 디자인&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;레지스터-디자인의-핵심&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0-%EB%94%94%EC%9E%90%EC%9D%B8%EC%9D%98-%ED%95%B5%EC%8B%AC&quot; aria-label=&quot;레지스터 디자인의 핵심 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;레지스터 디자인의 핵심&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;레지스터의 비트 수
→ 보편적으로 n비트 시스템에서는 명령어가 n비트이기 때문에 레지스터도 n비트로 설정&lt;/li&gt;
&lt;li&gt;레지스터 개수
→ 다다익선&lt;/li&gt;
&lt;li&gt;레지스터 각각의 용도
→ RAM이나 H/D과 같은 범용 메모리와는 다르게 특별한 목적이 할당된 칸이 존재
→ 명령어가 단순화되고, 속도 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;컴퓨터-구조의-접근방법-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B0%A9%EB%B2%95-2&quot; aria-label=&quot;컴퓨터 구조의 접근방법 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조의 접근방법 (2)&lt;/h2&gt;
&lt;p&gt;명령어 디자인에 따라 ALU 도 결정 → ALU가 명령어를 읽어야 하기 때문&lt;/p&gt;
&lt;h3 id=&quot;명령어-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;명령어 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 구성&lt;/h3&gt;
&lt;p&gt;각 부분에 비트를 조합하여 할당 → 명령어의 종류에 따라 명령어 구성(설계)이 상이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예약&lt;/li&gt;
&lt;li&gt;연산자&lt;/li&gt;
&lt;li&gt;저장소
→ 연산 결과는 레지스터에 저장&lt;/li&gt;
&lt;li&gt;피연산자
→ 레지스터 주소 or 숫자 구분하기 위해 첫 비트를 구분자로 약속
→ 표현할 수 있는 숫자가 많지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;명령어-구조-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B5%AC%EC%A1%B0-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;명령어 구조 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 구조 종류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CISC 계열
→ 복잡한 명령어, 다양한 형태로 조합
→ 일정 수준 이상 속도를 향상시킬 수 없음&lt;/li&gt;
&lt;li&gt;RISC 계열
→ CISC의 명령어를 간소화
→ 제한사항 존재
→ 오늘날 대부분의 CPU에 적용
→ Fetch, Decode, Execution 을 각각 1클럭에 수행할 때, 여러 명령어 동시에 실행 가능
→ CISC 보다 적은 클럭 수를 가지고 같은 양의 명령 수행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;load--store-명령어-디자인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#load--store-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%94%94%EC%9E%90%EC%9D%B8&quot; aria-label=&quot;load  store 명령어 디자인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LOAD &amp;#x26; STORE 명령어 디자인&lt;/h2&gt;
&lt;h3 id=&quot;load-명령어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#load-%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;load 명령어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LOAD 명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;레지스터로 피연산자의 메모리 주소를 불러들이는 명령&lt;/li&gt;
&lt;li&gt;명령어 구조
→ 예약
→ LOAD
→ destination
→ source&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;store-명령어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#store-%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;store 명령어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;STORE 명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;연산 결과를 레지스터에 저장&lt;/li&gt;
&lt;li&gt;명령어 구조
→ 예약
→ STORE
→ source
→ destination&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;load-와-store-의-필요성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#load-%EC%99%80-store-%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1&quot; aria-label=&quot;load 와 store 의 필요성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LOAD 와 STORE 의 필요성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;명령어 제한
→ 사칙연산의 피연산자는 숫자 or 레지스터 주소
→ 연산 결과는 레지스터에 저장
→ 모든 연산은 레지스터를 통해 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;레지스터를-통한-연산&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%97%B0%EC%82%B0&quot; aria-label=&quot;레지스터를 통한 연산 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;레지스터를 통한 연산&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;LOAD r1, 0x10&lt;/strong&gt; (0x10 에 있는 피연산자 호출하여 r1에 할당)&lt;br&gt;
&lt;strong&gt;LOAD r2, 0x20&lt;/strong&gt; (0x20 에 있는 피연산자 호출하여 r2에 할당)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ADD r3, r1, r2&lt;/strong&gt; (r1 과 r2 를 ADD 연산 하여 r3 에 할당)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STORE r3, 0x30&lt;/strong&gt; (r3 의 값을 0x30 에 저장)&lt;/p&gt;
&lt;h2 id=&quot;메모리를-참조하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;메모리를 참조하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리를 참조하는 방법&lt;/h2&gt;
&lt;h3 id=&quot;direct-모드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#direct-%EB%AA%A8%EB%93%9C&quot; aria-label=&quot;direct 모드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Direct 모드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메모리 주소를 레지스터에 바로 할당
→ LOAD r1, 0x10 (0x10 값을 r1 에 할당)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;indirect-모드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#indirect-%EB%AA%A8%EB%93%9C&quot; aria-label=&quot;indirect 모드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Indirect 모드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메모리 주소에 있는 번지수를 참조하여 해당 번지에 있는 값을 레지스터에 할당
→ LOAD r1, [0x10] (0x10 에 있는 번지수를 참조하여 그 값을 r1 에 할당)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현재의 비트 수로는 주소나 값을 표현하기 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;해결법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0%EB%B2%95&quot; aria-label=&quot;해결법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결법&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;LOAD r1, 0x0010&lt;/strong&gt; (0x0010 에 있는 피연산자 호출하여 r1에 할당)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MUL r0, 4, 4&lt;/strong&gt; (4와 4를 곱셈하여 16을 r0에 할당)&lt;br&gt;
&lt;strong&gt;MUL r2, 4, 4&lt;/strong&gt; (4와 4를 곱셈하여 16을 r2에 할당)&lt;br&gt;
&lt;strong&gt;MUL r3, r0, r2&lt;/strong&gt; (r0와 r2를 곱셈하여 256, 즉 0x100 을 r3에 할당)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STORE r3, 0x0030&lt;/strong&gt; (r3 의 값을 0x0030 에 저장)&lt;br&gt;
&lt;strong&gt;LOAD r2, [0x0030]&lt;/strong&gt; (0x0030 에 있는 번지수를 참조하여 그 값을 r2 에 할당)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ADD r3, r1, r2&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[아스키코드 vs 유니코드]]></title><description><![CDATA[문자셋의 종류 SBCS(Single Byte Character Set) 1바이트 문자 표현 ASCII CODE printf, scanf, fgets, fputs 함수 MBCS(Multi Byte Character Set) 1바이트 or…]]></description><link>https://makeitmin.github.io/Computer Science/아스키코드-vs-유니코드/</link><guid isPermaLink="false">https://makeitmin.github.io/Computer Science/아스키코드-vs-유니코드/</guid><pubDate>Mon, 28 Jun 2021 18:07:55 GMT</pubDate><content:encoded>&lt;h2 id=&quot;문자셋의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%85%8B%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;문자셋의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자셋의 종류&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SBCS(Single Byte Character Set)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1바이트 문자 표현&lt;/li&gt;
&lt;li&gt;ASCII CODE&lt;/li&gt;
&lt;li&gt;printf, scanf, fgets, fputs 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MBCS(Multi Byte Character Set)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1바이트 or 2바이트 문자 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WBCS(Wide Byte Character Set)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2바이트 문자 표현&lt;/li&gt;
&lt;li&gt;UNICODE&lt;/li&gt;
&lt;li&gt;wprintf, wscanf, fgetws, fputws 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;mbcs-기반의-프로그래밍의-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mbcs-%EA%B8%B0%EB%B0%98%EC%9D%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;mbcs 기반의 프로그래밍의 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MBCS 기반의 프로그래밍의 문제점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;strlen 이 문자열의 길이를 계산할 때 NULL 문자 불포함&lt;/li&gt;
&lt;li&gt;문자열의 실제 길이와 문자열에 할당된 크기가 다를 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;wbcs-기반의-프로그래밍&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#wbcs-%EA%B8%B0%EB%B0%98%EC%9D%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D&quot; aria-label=&quot;wbcs 기반의 프로그래밍 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WBCS 기반의 프로그래밍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MBCS 기반 프로그래밍의 문제점 해결 → 모든 문자들을 동일한 2바이트의 크기로 처리&lt;/li&gt;
&lt;li&gt;자료형 char → 자료형 wchar_t&lt;/li&gt;
&lt;li&gt;할당되는 문자열 앞에 ‘L’ 표기&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[컴퓨터 구조에 대한 첫 번째 이야기]]></title><description><![CDATA[컴퓨터 구조와 운영체제 컴퓨터 구조 CPU (중앙처리장치) Cache 운영체제 메인 메모리 (램) 하드디스크 컴퓨터 하드웨어의 구성 및 CPU 이해 CPU ALU…]]></description><link>https://makeitmin.github.io/Computer Science/컴퓨터-구조에-대한-첫-번째-이야기/</link><guid isPermaLink="false">https://makeitmin.github.io/Computer Science/컴퓨터-구조에-대한-첫-번째-이야기/</guid><pubDate>Thu, 24 Jun 2021 23:07:30 GMT</pubDate><content:encoded>&lt;h2 id=&quot;컴퓨터-구조와-운영체제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C&quot; aria-label=&quot;컴퓨터 구조와 운영체제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조와 운영체제&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;컴퓨터 구조&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU (중앙처리장치)&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메인 메모리 (램)&lt;/li&gt;
&lt;li&gt;하드디스크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;컴퓨터-하드웨어의-구성-및-cpu-이해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4%EC%9D%98-%EA%B5%AC%EC%84%B1-%EB%B0%8F-cpu-%EC%9D%B4%ED%95%B4&quot; aria-label=&quot;컴퓨터 하드웨어의 구성 및 cpu 이해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 하드웨어의 구성 및 CPU 이해&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;ALU: 연산(산술/논리)을 담당&lt;/li&gt;
&lt;li&gt;컨트롤 유닛: 실행파일(컴파일된 명령어)를 해석하여 다른 블록에 전송&lt;/li&gt;
&lt;li&gt;레지스터: 각 블록이 필요로 하는 요소(명령어/피연산자)를 저장해두고 요청이 올 때 제공&lt;/li&gt;
&lt;li&gt;버스 인터페이스: 입출력 버스의 통신규약을 이해하고 명령어와 데이터를 CPU 내부로 받는 중간자 역할&lt;/li&gt;
&lt;li&gt;메인 메모리: 컴파일이 완료된 프로그램 코드가 올라가서 실행되는 영역&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입출력 버스: 데이터를 전송하는 통로&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어드레스 버스: 데이터의 주소값을 전달하는 버스&lt;/li&gt;
&lt;li&gt;데이터 버스: 데이터를 전달하는 버스&lt;/li&gt;
&lt;li&gt;컨트롤 버스: 어떤 것(데이터 또는 주소값)을 전달할 것인지 신호를 보내는 버스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;클럭 신호: 가장 느린 연산의 속도에 맞춰 데이터를 이동시키는 신호&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;프로그램의-실행-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EC%8B%A4%ED%96%89-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;프로그램의 실행 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로그램의 실행 과정&lt;/h2&gt;
&lt;p&gt;폰 노이만 아키텍처(Stored Program Concept) : 프로그램이 컴퓨터 내부에 저장되어 순차적으로 실행되는 구조&lt;/p&gt;
&lt;h3 id=&quot;실행파일의-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;실행파일의 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행파일의 생성&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;전처리기에 의한 치환 작업
: 지시자에 따라 소스코드 변경&lt;/li&gt;
&lt;li&gt;컴파일러에 의한 번역
: 소스코드를 어셈블리 코드로 번역&lt;/li&gt;
&lt;li&gt;어셈블러에 의한 바이너리 코드 생성
: 어셈블리 코드를 컴퓨터가 이해할 수 있는 바이너리 코드로 변경&lt;/li&gt;
&lt;li&gt;링커에 의한 연결과 결합
: 프로그램 내 참조 함수나 라이브러리를 연결하여 실행파일 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;실행파일의-작동&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%9E%91%EB%8F%99&quot; aria-label=&quot;실행파일의 작동 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행파일의 작동&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Fetch
: 메인 메모리에 로드된 실행파일의 명령어를 CPU로 전송&lt;/li&gt;
&lt;li&gt;Decode
: 명령어를 CPU가 연산하기 위해 해석&lt;/li&gt;
&lt;li&gt;Execution
: 해석된 명령어를 CPU가 실행&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;요약&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU에서 &lt;code class=&quot;language-text&quot;&gt;컨트롤 버스&lt;/code&gt;를 통해 어떤 작업을 원하는지 &lt;code class=&quot;language-text&quot;&gt;메인 메모리&lt;/code&gt;로 신호를 보낸다.&lt;/li&gt;
&lt;li&gt;메인 메모리에서 &lt;code class=&quot;language-text&quot;&gt;데이터 버스&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;어드레스 버스&lt;/code&gt;를 통해 데이터와 명령어를 전송한다.&lt;/li&gt;
&lt;li&gt;데이터와 명령어는 통신규약을 알고 있는 &lt;code class=&quot;language-text&quot;&gt;버스 인터페이스&lt;/code&gt;에 도착해서 CPU 내부로 전송된다. (Fetch)&lt;/li&gt;
&lt;li&gt;CPU 내부에서 데이터와 명령어는 &lt;code class=&quot;language-text&quot;&gt;레지스터&lt;/code&gt;에 대기 상태로 저장된다.&lt;/li&gt;
&lt;li&gt;순차적인 &lt;code class=&quot;language-text&quot;&gt;클럭 신호&lt;/code&gt;에 따라 레지스터에 저장된 명령어는 &lt;code class=&quot;language-text&quot;&gt;컨트롤 유닛&lt;/code&gt;으로 전송되어 해석(Decode)되고, 레지스터에 저장된 데이터는 &lt;code class=&quot;language-text&quot;&gt;ALU&lt;/code&gt;로 전송된다.&lt;/li&gt;
&lt;li&gt;ALU에서 명령어와 데이터로 연산이 수행된다. (Execution)&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[GitLab에서 GitHub로 Repository 이전하기]]></title><description><![CDATA[Code 이전하기 (간단) Issues, Milestones, Merge Request 이전하기 (복잡)   시작하기 전에 Merge Request를 이전하는 것은 open 되어 있는 것들만 가능합니다. GitHub API 정책상 Merge…]]></description><link>https://makeitmin.github.io/Git/gitlab에서-github로-repository-이전하기/</link><guid isPermaLink="false">https://makeitmin.github.io/Git/gitlab에서-github로-repository-이전하기/</guid><pubDate>Sat, 27 Mar 2021 07:07:12 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;Code 이전하기 (간단)&lt;/li&gt;
&lt;li&gt;Issues, Milestones, Merge Request 이전하기 (복잡)  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;시작하기-전에&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90&quot; aria-label=&quot;시작하기 전에 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작하기 전에&lt;/h2&gt;
&lt;p&gt;Merge Request를 이전하는 것은 &lt;strong&gt;open&lt;/strong&gt; 되어 있는 것들만 가능합니다. GitHub API 정책상 Merge Request를 Pull Request로 옮기는 것은 &lt;strong&gt;Target 브랜치와 Source 브랜치 간의 커밋 차이&lt;/strong&gt;가 있어야 가능하다고 합니다. 이미 merged 상태인 것은 두 브랜치 간의 차이를 추적할 수 없으므로 Merge Request의 형태로 옮기기 어렵습니다.  &lt;/p&gt;
&lt;p&gt;해당 부분에 대해 &lt;a href=&quot;https://github.com/piceaTech/node-gitlab-2-github/issues/91#issuecomment-884719601&quot;&gt;직접 질문을 남긴 내용&lt;/a&gt;입니다.  &lt;/p&gt;
&lt;p&gt;질문 당시 merged 상태인 Merge Request를 이전할 경우 오류가 나고 있는 상황이었고, 이에 따라 이미 merged 상태인 Merge Request는 Issue의 형태로 이전되도록 어떤 친절한 개발자분의 코드 개선으로 &lt;a href=&quot;https://github.com/piceaTech/node-gitlab-2-github/pull/93&quot;&gt;오류가 핸들링된 내용&lt;/a&gt;입니다.&lt;/p&gt;
&lt;h2 id=&quot;방법-1--code-이전하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95-1--code-%EC%9D%B4%EC%A0%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;방법 1  code 이전하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법 1 : Code 이전하기&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;GitHub에 옮길 빈 Repository를 미리 생성합니다.&lt;/li&gt;
&lt;li&gt;로컬에서 다음을 수행합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# GitLab에서 bare 상태로 자신의 Repository clone 해오기&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone --mirror https://kdt-gitlab.elice.io/001_part2_project-portfolio/team2/skidmarker.git

&lt;span class=&quot;token comment&quot;&gt;# 프로젝트 폴더로 이동하기&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; skidmarker.git

&lt;span class=&quot;token comment&quot;&gt;# 새 GitHub Repository에 remote 연결&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote set-url --push origin https://github.com/makeitmin/skidmarker.git

&lt;span class=&quot;token comment&quot;&gt;# 새 GitHub Repository로 push 하기&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push --no-verify --mirror https://github.com/makeitmin/skidmarker.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;방법-2---issues-milestones-merge-requests-이전하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95-2---issues-milestones-merge-requests-%EC%9D%B4%EC%A0%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;방법 2   issues milestones merge requests 이전하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법 2 :  Issues, Milestones, Merge Requests 이전하기&lt;/h2&gt;
&lt;h3 id=&quot;폴더-생성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8F%B4%EB%8D%94-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;폴더 생성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;폴더 생성하기&lt;/h3&gt;
&lt;p&gt;CMD를 열고 다음을 수행합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; C:/Users/사용자/.ssh
&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; github
&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; gitlab&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gitlab과-github에서-각각-ssh-key-발급받기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gitlab%EA%B3%BC-github%EC%97%90%EC%84%9C-%EA%B0%81%EA%B0%81-ssh-key-%EB%B0%9C%EA%B8%89%EB%B0%9B%EA%B8%B0&quot; aria-label=&quot;gitlab과 github에서 각각 ssh key 발급받기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GitLab과 GitHub에서 각각 SSH Key 발급받기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GitLab 공개키&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1.1&lt;/strong&gt; SSH Key 발급받기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Git Bash에서 작업&lt;/span&gt;
ssh-keygen
Generating public/private rsa key pair.
**Enter &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; to save the key &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/c/Users/사용자/.ssh/id_rsa&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: /c/Users/사용자/.ssh/github/id_rsa &lt;span class=&quot;token comment&quot;&gt;# Key 파일 저장할 경로 입력하기**&lt;/span&gt;
Created directory &lt;span class=&quot;token string&quot;&gt;&apos;/기본저장경로 또는 입력경로&apos;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
**Enter passphrase &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; no passphrase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:      &lt;span class=&quot;token comment&quot;&gt;# 암호 입력하기**&lt;/span&gt;
**Enter same passphrase again:                     &lt;span class=&quot;token comment&quot;&gt;# 암호 재입력하기**&lt;/span&gt;
Your identification has been saved &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; /입력한 경로.
Your public key has been saved &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; /입력한 경로.
The key fingerprint is: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1.1.2&lt;/strong&gt; Key 파일이 저장된 경로의 id_rsa.pub 내용 복사&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ssh-rsa 뒤부터 사용자 이메일까지 복사&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; C://Users/사용자/.ssh/github/id_rsa.pub ssh-rsa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1.1.3&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;GitLab 프로필&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;Settings&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;SSH Keys&lt;/code&gt;에 접근&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1.4&lt;/strong&gt; 복사한 id_rsa.pub 내용 붙여넣고 등록&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1.5&lt;/strong&gt; 발급된 token 복사하기(다시 조회할 수 없으니 꼭 다른 곳에 복사해두기)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub 공개키&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1&lt;/strong&gt; SSH Key 발급받기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Git Bash&lt;/span&gt;
ssh-keygen
Generating public/private rsa key pair.
**Enter &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; to save the key &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/c/Users/사용자/.ssh/id_rsa&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: /c/Users/사용자/.ssh/gitlab/id_rsa &lt;span class=&quot;token comment&quot;&gt;# Key 파일 저장할 경로 입력하기**&lt;/span&gt;
Created directory &lt;span class=&quot;token string&quot;&gt;&apos;/기본저장경로 또는 입력경로&apos;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
**Enter passphrase &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; no passphrase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:      &lt;span class=&quot;token comment&quot;&gt;# 암호 입력하기**&lt;/span&gt;
**Enter same passphrase again:                     &lt;span class=&quot;token comment&quot;&gt;# 암호 재입력하기**&lt;/span&gt;
Your identification has been saved &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; /입력한 경로.
Your public key has been saved &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; /입력한 경로.
The key fingerprint is: &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.2&lt;/strong&gt; Key 파일이 저장된 경로의 id_rsa.pub 내용 복사&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ssh-rsa 뒤부터 사용자 이메일까지 복사&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; C://Users/사용자/.ssh/gitlab/id_rsa.pub ssh-rsa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.3&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;GitHub 프로필&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;Settings&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;SSH and GPG Key&lt;/code&gt; → &lt;code class=&quot;language-text&quot;&gt;New SSH Key&lt;/code&gt;에 접근&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.4&lt;/strong&gt; 복사한 id_rsa.pub 내용 붙여넣고 등록&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.5&lt;/strong&gt; 발급된 token 복사하기(다시 조회할 수 없으니 꼭 다른 곳에 복사해두기)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;node-gitlab-2-github-사용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#node-gitlab-2-github-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;node gitlab 2 github 사용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;node-gitlab-2-github 사용하기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;node-gitlab-2-github 가져오기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/piceaTech/node-gitlab-2-github.git
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; node-gitlab-2-github&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node_modules 설치하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;settings.ts 생성하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; sample_settings.ts settings.ts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;settings.ts 작성하고 저장하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

gitlab: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    url: &lt;span class=&quot;token string&quot;&gt;&apos;https://kdt-gitlab.elice.io&apos;&lt;/span&gt;,
    token: &lt;span class=&quot;token string&quot;&gt;&apos;복사해둔 GitLab token&apos;&lt;/span&gt;,
    projectId: &lt;span class=&quot;token string&quot;&gt;&apos;GitLab Repository의 Project ID&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# ex) 551 (Repository 타이틀 아래에 있음)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  github: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    baseUrl: &lt;span class=&quot;token string&quot;&gt;&apos;https://api.github.com&apos;&lt;/span&gt;,
    owner: &lt;span class=&quot;token string&quot;&gt;&apos;GitHub 유저명&apos;&lt;/span&gt;,
    token: &lt;span class=&quot;token string&quot;&gt;&apos;복사해둔 GitHub token&apos;&lt;/span&gt;,
    repo: &lt;span class=&quot;token string&quot;&gt;&apos;GitHub Repository 이름&apos;&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

transfer: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    milestones: true,
    labels: true,
    issues: true,
    mergeRequests: true,
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실행하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;참고링크&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;node-gitlab-2-github&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/piceaTech/node-gitlab-2-github&quot;&gt;piceaTech/node-gitlab-2-github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH 공개키 생성&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EC%84%9C%EB%B2%84-SSH-%EA%B3%B5%EA%B0%9C%ED%82%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot;&gt;Git - SSH 공개키 만들기&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH 공개키 등록&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brunch.co.kr/@anonymdevoo/10&quot;&gt;Github ssh key 등록하는 법&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[about]]></title><description><![CDATA[소개 업데이트 예정입니다]]></description><link>https://makeitmin.github.io/resume-en/</link><guid isPermaLink="false">https://makeitmin.github.io/resume-en/</guid><pubDate>Sun, 27 Jan 2019 16:21:13 GMT</pubDate><content:encoded>&lt;h1 id=&quot;소개&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EA%B0%9C&quot; aria-label=&quot;소개 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소개&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;&lt;em&gt;업데이트 예정입니다&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>